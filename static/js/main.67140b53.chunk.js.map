{"version":3,"sources":["img/rotate-image.svg","BoardForm/CollapseButton.tsx","BoardView.tsx","BoardForm/BasicInput.tsx","BoardForm/InputCard.tsx","BoardForm/RadioInput.tsx","BoardForm/SeedInput.tsx","BoardForm/BoardForm.tsx","BoardEncoding.ts","BoardGenerator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["_g","_g2","_g3","_g4","_g5","_g6","_g7","_g8","_g9","_g10","_g11","_g12","_g13","_g14","_g15","_g16","COLLAPSIBLE_EASING","CollapseButton","isOpen","label","closeLabelOnOpen","style","position","fontSize","cursor","marginLeft","marginBottom","undefined","trigger","open","transitionTime","easing","padding","top","right","display","transition","transform","_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgRotateImage","_ref","svgRef","title","titleId","props","id","xmlns","xmlnsXlink","x","y","width","height","viewBox","enableBackground","xmlSpace","fill","ref","d","ForwardRef","typeToColor","Blue","Red","Bystander","Assassin","DuetCorrect","SingleBoardView","cards","startColor","useState","boardRotation","setBoardRotation","rotate","counterClockwise","prevRotation","maxWidth","minWidth","aspectRatio","margin","background","borderRadius","border","boxShadow","isTop","color","resetRotation","isLeft","flex","flexDirection","map","row","colIndex","cellType","rowIndex","bottom","left","RotateButton","onClick","DuetBoardView","info","teamName","cell","item","HLight","lightColor","zIndex","VLight","BoardSection","defaultOpen","isBoardOpen","setIsBoardOpen","tabIndex","handleTriggerClick","window","confirm","containerElementProps","PAGE_SECTION_STYLE","BoardView","layout","mode","BasicInput","value","defaultValue","inputProps","useControllableState","inputValue","setInputValue","type","linkButtonStyle","onChange","e","InputCard","children","paddingLeft","paddingBottom","RadioInput","labels","checkedLabel","setCheckedLabel","marginRight","checked","SeedInput","randomSeed","seed","setSeed","newSeed","fontFamily","textDecoration","defaultFormValues","Standard","boardRows","boardColumns","startCards","assassins","Duet","suggestedCards","rows","columns","gameMode","Math","floor","suggestedAssassins","random","toString","slice","initialValue","stateValue","BoardForm","formData","setFormData","startValues","proxyGameMode","setProxyGameMode","_setGameMode","setRows","setColumns","setCards","setStartCards","setAssassins","setStartColor","newSeedOnGenerate","setNewSeedOnGenerate","closeConfigOnGenerate","setCloseConfigOnGenerate","error","setError","isCollapsibleOpen","setIsCollapsibleOpen","resetFormInputs","setResetFormInputs","onTriggerOpening","onTriggerClosing","onSubmit","preventDefault","FormData","currentTarget","entries","k","v","test","parseInt","action","totalCards","configuredCards","setTimeout","flexWrap","name","onClose","newMode","defaults","setGameMode","className","WRITE_VERSION","v1FormDataKeys","sort","v2FormDataKeys","formDataKeys","encodeFormData","orderedValues","k1","k2","localeCompare","btoa","JSON","stringify","v1DecodeFormData","maybeFormData","decodeWithKeys","validate","v2DecodeFormData","orderedKeys","ret","forEach","isValidFormData","isNaN","getStartColor","seededRandomInt","createLayout","createStandardLayout","createDuetLayout","rand","actualStartColor","blueCards","redCards","flatLayout","Array","step","_fill","shuffle","chunk","bothCorrect","correctAssassins","min","correctBystanders","remainderAfterCorrect","remainingAssassins","bystanderAssassins","bothAssassins","arr","start","end","j","seedrandom","max","flexGrow","BoardGenerator","slug","useParams","initialFormData","version","parse","atob","decodeFormData","navigate","useNavigate","setFormDataAndHash","newFormData","href","alignItems","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67140b53.chunk.js","sourcesContent":["var _g, _g2, _g3, _g4, _g5, _g6, _g7, _g8, _g9, _g10, _g11, _g12, _g13, _g14, _g15, _g16;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgRotateImage(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    width: \"509.823px\",\n    height: \"509.822px\",\n    viewBox: \"0 0 509.823 509.822\",\n    style: {\n      enableBackground: \"new 0 0 509.823 509.822\"\n    },\n    xmlSpace: \"preserve\",\n    fill: \"#EEE\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M509.823,254.911c0,140.559-114.354,254.911-254.911,254.911C114.353,509.822,0,395.47,0,254.911h44.97 c0,115.758,94.182,209.949,209.942,209.949c115.757,0,209.938-94.191,209.938-209.949c0-115.76-94.182-209.941-209.938-209.941 c-50.893,0-99.505,18.291-137.719,51.558l45.908,45.903L20.507,165.208L43.283,22.633l42.057,42.05 C132.097,22.972,192.071,0,254.912,0C395.469,0,509.823,114.353,509.823,254.911z M409.653,251.164L255.002,96.513L100.347,251.164 l154.655,154.652L409.653,251.164z\"\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", null)), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", null)), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", null)), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", null)), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", null)), _g7 || (_g7 = /*#__PURE__*/React.createElement(\"g\", null)), _g8 || (_g8 = /*#__PURE__*/React.createElement(\"g\", null)), _g9 || (_g9 = /*#__PURE__*/React.createElement(\"g\", null)), _g10 || (_g10 = /*#__PURE__*/React.createElement(\"g\", null)), _g11 || (_g11 = /*#__PURE__*/React.createElement(\"g\", null)), _g12 || (_g12 = /*#__PURE__*/React.createElement(\"g\", null)), _g13 || (_g13 = /*#__PURE__*/React.createElement(\"g\", null)), _g14 || (_g14 = /*#__PURE__*/React.createElement(\"g\", null)), _g15 || (_g15 = /*#__PURE__*/React.createElement(\"g\", null)), _g16 || (_g16 = /*#__PURE__*/React.createElement(\"g\", null)));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRotateImage);\nexport default __webpack_public_path__ + \"static/media/rotate-image.0b60d7c6.svg\";\nexport { ForwardRef as ReactComponent };","import Collapsible from \"react-collapsible\";\n\ninterface CollapseButtonProps {\n    isOpen: boolean;\n    label?: string;\n    closeLabelOnOpen?: boolean\n}\n\nexport const COLLAPSIBLE_EASING = \"cubic-bezier(.5,.9,.2,1.0)\";\nexport const COLLAPSIBLE_TIME = 400;\n\nconst CollapseButton = ({isOpen, label, closeLabelOnOpen = true}: CollapseButtonProps) => {\n    return (\n        <div style={{ \n            position: 'relative',\n            fontSize: '24px',\n            cursor: 'pointer',\n            marginLeft: '16px',\n            marginBottom: isOpen && !closeLabelOnOpen ? '16px' : undefined\n        }}>\n            {closeLabelOnOpen \n                ? <Collapsible\n                    trigger=\"\"\n                    open={!isOpen}\n                    transitionTime={COLLAPSIBLE_TIME}\n                    easing={COLLAPSIBLE_EASING}\n                >{label}</Collapsible>\n                : label\n            }\n            <div\n                style={{\n                    position: 'absolute',\n                    padding: '8px',\n                    top: '-12px',\n                    right: '2px',\n                    display: 'block',\n                    transition: 'transform 300ms',\n                    transform: isOpen ? 'rotateZ(180deg)' : ''\n                }}\n            >⋁</div>\n        </div>\n    );\n}\n\nexport default CollapseButton;","import React, { CSSProperties, useState } from \"react\";\nimport Collapsible from \"react-collapsible\";\nimport { BoardLayout } from \"./BoardEncoding\";\nimport CollapseButton from \"./BoardForm/CollapseButton\";\nimport { PAGE_SECTION_STYLE } from \"./BoardGenerator\";\n\nimport { ReactComponent as RotateCounterClockwiseIcon } from './img/rotate-image.svg';\n\nexport type CardType = 'Blue' | 'Red' | 'Bystander' | 'Assassin' | 'DuetCorrect';\n\nexport interface BoardProps {\n    layout: BoardLayout<CardType | CardType[]>;\n};\n\nexport const typeToColor: { [K in CardType]: string } = {\n    Blue: '#268bad',\n    Red: '#c9461d',\n    Bystander: '#af926e',\n    Assassin: '#1b1b1b',\n    DuetCorrect: '#4CBB17'\n}\n\nconst BoardView: React.FC<BoardProps> = ({layout: { cards, mode, startColor, info }}) => (\n    mode === 'Standard'\n        ? <BoardSection defaultOpen={true} teamName=\"Codemasters\" startColor={startColor} cards={cards as CardType[][]}/>\n        : <DuetBoardView cards={cards as CardType[][][]} info={info}/>\n);\n\n\nconst SingleBoardView: React.FC<{cards: CardType[][], startColor: CardType}> = ({ cards, startColor }) => {\n    const [boardRotation, setBoardRotation] = useState<number>(0);\n\n    const rotate = (counterClockwise: boolean) => setBoardRotation(prevRotation => \n        counterClockwise \n            ? prevRotation - 90\n            : prevRotation + 90\n        );\n    // subtract rotation % 360 for correcct animations, if used 0 would spin through all rotations\n    const resetRotation = () => setBoardRotation(prevRotation => prevRotation - (prevRotation % 360));\n    return (\n        <div style={{\n            position: 'relative',\n            padding: '0 48px'\n        }}>\n            <div style={{\n                position: 'relative',\n                display: 'flex',\n                maxWidth: '720px',\n                minWidth: '424px',\n                aspectRatio: '1 / 1',\n                margin: '18px auto',\n                padding: '32px',\n                background: '#434343',\n                borderRadius: '12px',\n                border: '1px solid #777',\n                boxShadow: '8px 8px 12px #2b2b2b',\n                transform: `rotate(${boardRotation}deg)`,\n                transition: 'transform 400ms ease-in-out'\n            }}>\n                <HLight isTop={true} color={startColor} resetRotation={resetRotation} />\n                <HLight isTop={false} color={startColor} />\n                <VLight isLeft={true} color={startColor} />\n                <VLight isLeft={false} color={startColor} />\n                <div style={{\n                    minWidth: '360px',\n                    flex: 1,\n                    aspectRatio: '1 / 1',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    borderRadius: '12px',\n                    background: '#2b2b2b',\n                    border: '1px solid #777',\n                    padding: '8px'\n                }}>\n                    {cards.map((row, colIndex) =>\n                        <div key={colIndex} style={{\n                            display: 'flex',\n                            flexDirection: 'row',\n                            flex: 1\n                        }}>\n                            {row.map((cellType, rowIndex) =>\n                                <div key={`${colIndex}-${rowIndex}`} style={{\n                                    flex: 1,\n                                    background: typeToColor[cellType],\n                                    margin: '4px',\n                                    borderRadius: '12px',\n                                    boxShadow: '6px 6px 8px #1c1c1c',\n                                    border: '1px solid #555'\n                                }} />\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n            <RotateButton rotate={rotate} counterClockwise={true} style={{ position: 'absolute', bottom: '8px', left: '8px' }} />\n            <RotateButton rotate={rotate} counterClockwise={false} style={{ position: 'absolute', bottom: '8px', right: '8px' }} />\n        </div>\n    );\n};\n\ninterface RotateButtonProps {\n    rotate: (counterClockwise: boolean) => void;\n    counterClockwise?: boolean;\n    style?: CSSProperties;\n}\n\nconst RotateButton: React.FC<RotateButtonProps> = ({ \n    rotate,\n    counterClockwise = true, \n    style={}\n}) => {\n    return (\n        <RotateCounterClockwiseIcon \n            onClick={() => rotate(counterClockwise)}\n            style={{\n                width: '24px',\n                height: '24px',\n                transform: counterClockwise ? '': 'scaleX(-1)',\n                cursor: 'pointer',\n                ...style\n            }} \n        />\n    );\n}\n\nconst DuetBoardView: React.FC<{cards: CardType[][][], info?: string[]}> = ({ cards, info}) => {\n    return (\n        <>\n            <BoardSection teamName=\"Team 1\" startColor=\"DuetCorrect\" cards={cards.map(row => row.map(cell => cell[0]))}/>\n            <BoardSection teamName=\"Team 2\" startColor=\"DuetCorrect\" cards={cards.map(row => row.map(cell => cell[1]))}/>\n            {info && <div style={{\n                    margin: 'auto',\n                    border: '1px solid #555',\n                    borderRadius: '16px',\n                    padding: '16px',\n                    boxShadow: '8px 8px 12px #2b2b2b'\n                }}>\n                <h3>Board Info</h3>\n                <ul>\n                    {info.map(item => <li style={{ margin: '8px 0'}}>{item}</li>)}\n                </ul>\n            </div>}\n        </>\n    );\n};\n\nconst HLight: React.FC<{ isTop: boolean, color?: CardType, resetRotation?: () => void }> = ({ isTop, resetRotation = null, color = 'Bystander' }) => {\n    const lightColor = typeToColor[color];\n    return (<>\n        <div style={{\n            position: 'absolute',\n            top: isTop ? 0 : undefined,\n            bottom: isTop ? undefined : 0,\n            left: '40%',\n            height: '32px',\n            width: '20%',\n            margin: 'auto',\n            transform: `perspective(10px) rotateX(${isTop ? '-' : ''}1deg)`,\n            borderRadius: isTop ? '4px 4px 8px 8px' : '8px 8px 4px 4px',\n            background: `linear-gradient(to right, ${lightColor} 5%, #FFF 45%, #FFF 55%, ${lightColor} 95%)`,\n            zIndex: 2\n        }}/>\n        {resetRotation && (\n            <div \n                style={{\n                    position: 'absolute',\n                    top: isTop ? 0 : undefined,\n                    bottom: isTop ? undefined : 0,\n                    left: '35%',\n                    height: '32px',\n                    width: '30%',\n                    margin: 'auto',\n                    zIndex: 1,\n                    cursor: 'pointer'\n                }} \n                onClick={resetRotation}\n            >\n                <div style={{\n                    width: '100%',\n                    transform: `perspective(10px) rotateX(${isTop ? '-' : ''}1deg)`,\n                    borderRadius: isTop ? '4px 4px 8px 8px' : '8px 8px 4px 4px',\n                    background: `#363636`,\n                    height: '32px',\n                }}/>\n                <div style={{ position: 'absolute', transform: 'rotateZ(180deg)', left: '16px', top: '4px'}}>⋁</div>\n                <div style={{ position: 'absolute', transform: 'rotateZ(180deg)', right: '16px', top: '4px'}}>⋁</div>\n            </div>\n        )}\n    </>);\n};\n\nconst VLight: React.FC<{ isLeft: boolean, color?: CardType }> = ({ isLeft, color = 'Bystander' }) => {\n    const lightColor = typeToColor[color];\n    return <div style={{\n        position: 'absolute',\n        left: isLeft ? 0 : undefined,\n        right: isLeft ? undefined : 0,\n        top: '40%',\n        height: '20%',\n        width: '32px',\n        margin: 'auto',\n        transform: `perspective(10px) rotateY(${isLeft ? '' : '-'}1deg)`,\n        borderRadius: isLeft ? '4px 8px 8px 4px' : '8px 4px 4px 8px',\n        background: `linear-gradient(to bottom, ${lightColor} 5%, #FFF 45%, #FFF 55%, ${lightColor} 95%)`,\n    }} />\n};\n\ninterface BoardSectionProps {\n    teamName: string;\n    cards: CardType[][];\n    startColor: CardType;\n    defaultOpen?: boolean;\n}\n\nconst BoardSection = ({teamName, cards, startColor, defaultOpen = false }: BoardSectionProps) => {\n    const [isBoardOpen, setIsBoardOpen] = useState<boolean>(defaultOpen);\n    return <Collapsible\n        tabIndex={0}\n        trigger={<CollapseButton label={teamName} isOpen={isBoardOpen} closeLabelOnOpen={false} />}\n        open={isBoardOpen}\n        handleTriggerClick={() => {\n            if (!isBoardOpen && window.confirm(`For ${teamName}'s eyes only - are you sure?`)) {\n                setIsBoardOpen(true);\n            }\n            if (isBoardOpen) {\n                setIsBoardOpen(false);\n            }\n        }}\n        containerElementProps={{\n            style: PAGE_SECTION_STYLE\n        }}\n    >\n        <SingleBoardView cards={cards} startColor={startColor} />\n    </Collapsible>;\n}\n\nexport default BoardView;\n","import React from \"react\";\nimport { useControllableState, linkButtonStyle } from \"./BoardForm\";\n\nexport const BasicInput: React.FC<{ label: string; } & React.ComponentProps<\"input\">> = ({ label, value, defaultValue, ...inputProps }) => {\n    const [inputValue, setInputValue] = useControllableState(value, defaultValue || '');\n\n    return (\n        <label style={{ display: 'flex', flexDirection: 'column', margin: '8px' }}>\n            <span>{label} {defaultValue !== undefined && (\n                <button\n                    type=\"button\"\n                    style={{ ...linkButtonStyle, color: '#888', fontSize: '14px' }}\n                    onClick={() => {\n                        setInputValue(defaultValue);\n                        // @ts-ignore\n                        inputProps.onChange && inputProps.onChange({ target: { value: defaultValue } });\n                    }}\n                >\n                    Suggested: {defaultValue}\n                </button>\n            )}</span>\n            <input\n                {...inputProps}\n                value={inputValue}\n                onChange={(e) => {\n                    setInputValue(e.target.value);\n                    inputProps.onChange && inputProps.onChange(e);\n                }} />\n        </label>\n    );\n};\n","import React, { CSSProperties } from \"react\";\n\n\nexport interface InputCardProps {\n    title: string;\n    style?: CSSProperties;\n}\n\nexport const InputCard: React.FC<InputCardProps> = ({ title, style = {}, children }) => {\n    return (\n        <div style={{ marginLeft: '24px', marginBottom: '24px', maxWidth: '33%', minWidth: '180px', ...style }}>\n            <div style={{ paddingLeft: '16px', paddingBottom: '8px' }}><b>{title}</b></div>\n            <div style={{\n                border: '1px solid #555',\n                padding: '16px',\n                borderRadius: '16px',\n                boxShadow: '6px 6px 8px #2b2b2b',\n            }}>\n                {children}\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { useControllableState, linkButtonStyle } from \"./BoardForm\";\n\nexport const RadioInput: React.FC<{ title?: string; labels: string[]; } & React.ComponentProps<\"input\">> = ({ title, labels, value, defaultValue, onChange, ...inputProps }) => {\n    const [checkedLabel, setCheckedLabel] = useControllableState(value, defaultValue || labels[0]);\n\n    return (\n        <div>\n            {(title || defaultValue !== undefined) && <>\n                <div>\n                    {title}\n                    {defaultValue !== undefined && (\n                        <button\n                            type=\"button\"\n                            style={{ ...linkButtonStyle, color: '#888', fontSize: '14px' }}\n                            onClick={() => {\n                                // @ts-ignore\n                                onChange && onChange({ target: { value: defaultValue } });\n                                setCheckedLabel(defaultValue);\n                            }}\n                        >\n                            Suggested: {defaultValue}\n                        </button>\n                    )}\n                </div>\n                <hr />\n            </>}\n            {labels.map((label) => (\n                <label style={{ marginRight: '6px' }}>{label}\n                    <input\n                        type=\"radio\"\n                        value={label}\n                        checked={label === checkedLabel}\n                        onChange={(e) => {\n                            setCheckedLabel(label);\n                            onChange && onChange(e);\n                        }}\n                        {...inputProps} />\n                </label>\n            ))}\n        </div>\n    );\n};\n","import React from \"react\";\nimport { useControllableState, randomSeed, linkButtonStyle } from \"./BoardForm\";\n\nexport const SeedInput: React.FC<React.ComponentProps<\"input\">> = ({ key, value, onChange, ...inputProps }) => {\n    const [seed, setSeed] = useControllableState(value, randomSeed());\n\n    return (\n        <div>\n            <div>\n                Seed\n                <button\n                    type=\"button\"\n                    style={{ ...linkButtonStyle, color: '#888', fontSize: '14px' }}\n                    onClick={() => {\n                        const newSeed = randomSeed();\n                        setSeed(newSeed);\n                        // @ts-ignore\n                        onChange && onChange({ target: { value: newSeed } });\n                    }}\n                >\n                    New Seed\n                </button>\n            </div>\n            <input\n                {...inputProps}\n                type=\"text\"\n                value={seed}\n                onChange={(e) => {\n                    setSeed(e.target.value);\n                    onChange && onChange(e);\n                }} />\n        </div>\n    );\n};\n","import React, { FormEventHandler, useState } from \"react\";\nimport Collapsible from \"react-collapsible\";\nimport { PAGE_SECTION_STYLE } from \"../BoardGenerator\";\nimport { typeToColor } from \"../BoardView\";\nimport { BasicInput } from \"./BasicInput\";\nimport CollapseButton, {COLLAPSIBLE_EASING, COLLAPSIBLE_TIME} from \"./CollapseButton\";\nimport { InputCard } from \"./InputCard\";\nimport { RadioInput } from \"./RadioInput\";\nimport { SeedInput } from \"./SeedInput\";\n\nexport type GameMode = 'Standard' | 'Duet';\n\nexport interface CodenamesFormData {\n    boardRows: number;\n    boardColumns: number;\n    cards: number;\n    startCards: number;\n    assassins: number;\n    startColor: 'Blue' | 'Red' | 'Random';\n    seed: string;\n    mode: GameMode;\n    [key: string]: string | number;\n}\n\nexport interface ModeConfig {\n    mode: GameMode;\n    \n}\n  \nexport interface BoardFormProps {\n    formData?: CodenamesFormData;\n    setFormData: (formData: CodenamesFormData) => void\n}\n\nexport const linkButtonStyle = {\n    padding: 'none',\n    background: 'none',\n    border: 'none',\n    cursor: 'pointer',\n    fontFamily: 'Helvetica,Arial,sans-serif',\n    fontSize: '16px',\n    textDecoration: 'underline',\n    color: '#FFF'\n};\n\nconst defaultFormValues: { [mode in GameMode]: CodenamesFormData } = {\n    Standard: {\n        boardRows: 5,\n        boardColumns: 5,\n        cards: 8,\n        startCards: 1,\n        assassins: 1,\n        startColor: 'Random',\n        mode: 'Standard',\n        seed: ''\n    },\n    Duet: {\n        boardRows: 5,\n        boardColumns: 5,\n        cards: 9,\n        startCards: 0,\n        assassins: 3,\n        startColor: 'Random',\n        mode: 'Duet',\n        seed: ''\n    }\n};\n\n\nconst BoardForm: React.FC<BoardFormProps> = ({ formData, setFormData }) => {\n    const startValues = formData\n        ? formData\n        : {\n            ...defaultFormValues.Standard,\n            seed: randomSeed()\n        };\n\n    // for animations\n    const [proxyGameMode, setProxyGameMode] = useState(startValues.mode);\n    const [mode, _setGameMode] = useState(startValues.mode);\n\n    const [rows, setRows] = useState(startValues.boardRows);\n    const [columns, setColumns] = useState(startValues.boardColumns);\n    const [cards, setCards] = useState(startValues.cards);\n    const [startCards, setStartCards] = useState(startValues.startCards);\n    const [assassins, setAssassins] = useState(startValues.assassins);\n    const [startColor, setStartColor] = useState(startValues.startColor);\n    const [seed, setSeed] = useState(startValues.seed);\n\n    const [newSeedOnGenerate, setNewSeedOnGenerate] = useState<boolean>(true);\n    const [closeConfigOnGenerate, setCloseConfigOnGenerate] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    const [isCollapsibleOpen, setIsCollapsibleOpen] = useState<boolean>(true);\n    const [resetFormInputs, setResetFormInputs] = useState<boolean>(false);\n\n    const setErrorTimeout: typeof setError = (action) => {\n        setTimeout(() => setError(null), 6 * 1000);\n        setError(action);\n    }\n\n    const setGameMode = (newMode: GameMode) => {\n        if (mode !== newMode) {\n            const defaults = defaultFormValues[newMode];\n            setRows(defaults.boardRows);\n            setColumns(defaults.boardColumns);\n            setCards(defaults.cards);\n            setStartCards(defaults.startCards);\n            setAssassins(defaults.assassins);\n            setStartColor(defaults.startColor);\n            setResetFormInputs(false);\n        }\n        _setGameMode(newMode);\n    };\n\n    const onFormSubmit: FormEventHandler<HTMLFormElement> = (e) => {\n        e.preventDefault();\n        const formData: any = {};\n        for (let [k, v] of (new FormData(e.currentTarget)).entries()) {\n            formData[k] = /^\\d+$/.test(v as string) ? parseInt(v as string) : v;\n        }\n\n        if (newSeedOnGenerate) {\n            const newSeed = randomSeed();\n            formData.seed = newSeed;\n            setSeed(newSeed);\n        }\n        const totalCards = formData.boardRows * formData.boardColumns;\n\n        const configuredCards = mode === 'Standard' \n            ? formData.cards * 2 + formData.startCards + formData.assassins\n            : formData.cards + formData.assassins;\n        if (configuredCards > totalCards) {\n            setErrorTimeout(`Too many configured cards (${configuredCards}) for this board (${formData.boardRows}x${formData.boardColumns}=${totalCards})`);\n            return false;\n        } else {\n            if (closeConfigOnGenerate) {\n                setIsCollapsibleOpen(false);\n            }\n            setFormData(formData);\n        }\n    };\n\n    return (\n        <Collapsible \n            tabIndex={0}\n            open={isCollapsibleOpen}\n            onTriggerOpening={() => setIsCollapsibleOpen(true)}\n            onTriggerClosing={() => setIsCollapsibleOpen(false)}\n            trigger={<CollapseButton isOpen={isCollapsibleOpen} label=\"Game Config\"/>}\n            containerElementProps={{style: PAGE_SECTION_STYLE}}\n            transitionTime={COLLAPSIBLE_TIME}\n            easing={COLLAPSIBLE_EASING}\n        >\n            <form onSubmit={onFormSubmit}>\n                <div style={{\n                    display: 'flex',\n                    flexWrap: 'wrap'\n                }}>\n                    {/* TODO confirm board reset */}\n                    <InputCard title=\"Game Mode\">\n                        <RadioInput labels={['Standard', 'Duet']} name=\"mode\" value={mode} onChange={(e) => {\n                            if (!window.confirm('This will reset config to default values - are you sure?')) {\n                                return;\n                            }\n                            setProxyGameMode(e.target.value as any);\n                            setResetFormInputs(true);\n                        }} />\n                    </InputCard>\n                </div>\n                <hr style={{ height: '1px', border: 'none', background: '#555', margin: '24px 0' }} />\n                <Collapsible \n                    trigger=\"\" \n                    open={!resetFormInputs} onClose={() => setGameMode(proxyGameMode)}\n                    transitionTime={COLLAPSIBLE_TIME}\n                    easing={COLLAPSIBLE_EASING}\n                >\n                    <div style={{\n                        display: 'flex',\n                        flexWrap: 'wrap',\n                        marginBottom: '24px'\n                    }}>\n                        \n                        <InputCard title=\"Board\">\n                            <BasicInput label=\"Rows\" type=\"number\" name=\"boardRows\" value={rows} onChange={(e) => setRows(parseInt(e.target.value))} defaultValue={defaultFormValues[mode].boardRows} />\n                            <BasicInput label=\"Columns\" type=\"number\" name=\"boardColumns\" value={columns} onChange={(e) => setColumns(parseInt(e.target.value))} defaultValue={defaultFormValues[mode].boardColumns} />\n                        </InputCard>\n                        <InputCard title=\"Game\">\n                            <BasicInput label=\"Team Cards\" type=\"number\" name=\"cards\" value={cards} onChange={(e) => setCards(parseInt(e.target.value))} defaultValue={suggestedCards(rows, columns, mode)} />\n                            <BasicInput label=\"Assassins\" type=\"number\" name=\"assassins\" value={assassins} onChange={(e) => setAssassins(parseInt(e.target.value))} defaultValue={suggestedAssassins(rows, columns, mode)} />\n                        </InputCard>\n                        {mode==='Standard' && <InputCard title=\"Standard Mode\">\n                            <BasicInput label=\"Start Handicap\" type=\"number\" name=\"startCards\" value={startCards} onChange={(e) => setStartCards(parseInt(e.target.value))} defaultValue={defaultFormValues[mode].startCards} />\n                            <RadioInput title=\"Starting Team\" labels={['Red', 'Blue', 'Random']} name=\"startColor\" value={startColor} onChange={(e) => setStartColor(e.target.value as any)} defaultValue=\"Random\" />\n                        </InputCard>}\n                        <InputCard title=\"Random\">\n                            <SeedInput name=\"seed\" value={seed} onChange={(e) => setSeed(e.target.value)}/>\n                        </InputCard>\n                        \n                    </div>\n                    <button style={{ \n                        background: typeToColor[mode === 'Standard' ? 'Blue' : 'DuetCorrect'], \n                        marginRight: '12px' \n                    }}>\n                        Generate\n                    </button>\n                    <label style={{ marginRight: '12px', color: '#888', fontSize: '14px' }}>\n                        <input type=\"checkbox\" checked={newSeedOnGenerate} onChange={(e) => setNewSeedOnGenerate(e.target.checked)}/>\n                        with a new random seed\n                    </label>\n                    <label style={{ marginRight: '12px', color: '#888', fontSize: '14px' }}>\n                        <input type=\"checkbox\" checked={closeConfigOnGenerate} onChange={(e) => setCloseConfigOnGenerate(e.target.checked)}/>\n                        Close config?\n                    </label>\n\n                    <button\n                        type=\"button\"\n                        onClick={() => {\n                            const defaults = defaultFormValues[mode];\n                            setRows(defaults.boardRows);\n                            setColumns(defaults.boardColumns);\n                            setCards(defaults.cards);\n                            setStartCards(defaults.startCards);\n                            setAssassins(defaults.assassins);\n                            setStartColor(defaults.startColor);\n                            setSeed(randomSeed());\n                        }}\n                        style={{ \n                            background: typeToColor[mode === 'Standard' ? 'Red' : 'Bystander'],\n                            marginRight: '12px' \n                        }}>\n                        Reset Defaults\n                    </button>\n                    {error && <span className=\"fade-out\" style={{ color: '#c9461d' }}>{error}</span>}\n                </Collapsible>\n            </form>\n        </Collapsible>\n    );\n};\n\nconst suggestedCards = (rows: number, columns: number, gameMode: GameMode) => {\n    if (!rows || !columns) {\n        return defaultFormValues[gameMode].cards;\n    }\n    if (gameMode === 'Standard') {\n        return Math.floor(rows * columns/3);\n    } else {\n        return Math.floor(rows * columns/3) + 1;\n    }\n};\n\nconst suggestedAssassins = (rows: number, columns: number, gameMode: GameMode) => \n    Math.floor(rows * columns / (gameMode === 'Standard' ? 15 : 8)) || defaultFormValues[gameMode].assassins;\n\nexport const randomSeed = (): string => Math.random().toString(36).slice(2);\n\nexport function useControllableState<T>(value: T, initialValue?: T | undefined): [state: T, setState: (action: React.SetStateAction<T>) => void] {\n    const [stateValue, setState] = useState(initialValue || value);\n    const effectiveValue = value !== undefined ? value : stateValue;\n    return [effectiveValue, setState];\n}\n\nexport default BoardForm;\n","\nimport chunk from 'lodash/chunk';\nimport fill from 'lodash/fill';\nimport seedrandom from 'seedrandom';\nimport { CodenamesFormData, GameMode } from './BoardForm/BoardForm';\nimport { CardType } from './BoardView';\n\nexport type FormDataVersion = 0 | 1 | 2;\n// eslint-disable-next-line\nconst UNKNOWN_VERSION = 0;\nconst WRITE_VERSION = 2;\n\nconst v1FormDataKeys = [\n    'boardRows',\n    'boardColumns',\n    'cards',\n    'startCards',\n    'startColor',\n    'assassins',\n    'seed'\n].sort();\n\nconst v2FormDataKeys = [\n    ...v1FormDataKeys,\n    'mode',\n].sort();\n\nconst formDataKeys = [\n    [],\n    v1FormDataKeys,\n    v2FormDataKeys\n];\n\nexport const encodeFormData = (formData: CodenamesFormData): string => {\n    const orderedValues = formDataKeys[WRITE_VERSION]\n                            .map((k): [k: string, v: string | number] => [k, formData[k]])\n                            .sort(([k1], [k2]) => k1.localeCompare(k2))\n                            .map(([_, v]) => v);\n    return btoa(JSON.stringify([WRITE_VERSION, ...orderedValues]));\n}\n\nexport const decodeFormData = (slug: string): CodenamesFormData | undefined => {\n    let orderedValues: any[] = [];\n    let version: FormDataVersion = 0;\n    try {\n        [version, ...orderedValues] = JSON.parse(atob(slug));\n    } catch {\n        return undefined;\n    }\n\n    switch(version) {\n        case 1:\n            return v1DecodeFormData(orderedValues);\n        case 2:\n            return v2DecodeFormData(orderedValues);\n        default:\n            return undefined;\n    }\n};\n\nconst v1DecodeFormData = (orderedValues: any[]): CodenamesFormData | undefined => {\n    const maybeFormData = decodeWithKeys(orderedValues, v1FormDataKeys);\n    if (maybeFormData) {\n        maybeFormData.mode = 'Standard';\n    }\n\n    return validate(maybeFormData);\n}\n\nconst v2DecodeFormData = (orderedValues: any[]): CodenamesFormData | undefined => \n    validate(decodeWithKeys(orderedValues, v2FormDataKeys));\n\nconst decodeWithKeys = (orderedValues: any[], orderedKeys: string[]): CodenamesFormData | undefined => {\n    if (orderedValues && orderedValues.length <= orderedKeys.length) {\n        const ret: any = {};\n        orderedKeys.forEach((key, i) => ret[key] = orderedValues[i]);\n        return ret;\n    }\n\n    return undefined;\n};\n\nconst validate = (maybeFormData: any): CodenamesFormData | undefined => {\n    if (isValidFormData(maybeFormData)) {\n        return maybeFormData;\n    }\n    return undefined;\n};\n\nconst isValidFormData = (maybeFormData: any): boolean => (\n    maybeFormData && \n    maybeFormData.boardRows && \n    maybeFormData.boardColumns && \n    maybeFormData.cards && \n    !isNaN(maybeFormData.startCards) && \n    !isNaN(maybeFormData.assassins) && \n    maybeFormData.seed &&\n    maybeFormData.mode\n);\n\nexport const getStartColor = (\n    startColor: 'Random' | 'Blue' | 'Red', \n    seed: string\n): 'Blue' | 'Red' => {\n    if (startColor === 'Random') {\n        return seededRandomInt(seed + 'start')(0, 1) ? 'Blue' : 'Red';\n    } else {\n        return startColor;\n    }\n}\n\nexport interface BoardLayout<C> {\n    mode: GameMode;\n    cards: C[][]\n    startColor: CardType;\n    info?: string[];\n}\n\nexport const createLayout = (formData: CodenamesFormData): BoardLayout<CardType | CardType[]> => (\n    formData.mode === 'Standard'\n        ? createStandardLayout(formData)\n        : createDuetLayout(formData)\n);\n\nconst createStandardLayout = ({\n    boardRows,\n    boardColumns,\n    cards,\n    startCards,\n    startColor,\n    assassins,\n    seed\n}: CodenamesFormData): BoardLayout<CardType> =>  {\n    const rand = seededRandomInt(seed);\n\n    const actualStartColor = getStartColor(startColor, seed);\n    const blueCards = cards + (actualStartColor === 'Blue' ? startCards : 0);\n    const redCards = cards + (actualStartColor === 'Red' ? startCards : 0);\n\n    const flatLayout: CardType[] = fill(Array(boardRows * boardColumns), 'Bystander');\n    let step = 0;\n    step = _fill(flatLayout, 'Blue', step, step + blueCards)\n    step = _fill(flatLayout, 'Red', step, step + redCards);\n    _fill(flatLayout, 'Assassin', step, step + assassins);\n\n    shuffle(flatLayout, rand);\n\n    return {mode: 'Standard', cards: chunk(flatLayout, boardColumns), startColor: getStartColor(startColor, seed)};\n};\n\nconst createDuetLayout = ({\n    boardRows,\n    boardColumns,\n    cards,\n    assassins,\n    seed,\n}: CodenamesFormData): BoardLayout<CardType[]> =>  {\n    const rand = seededRandomInt(seed);\n\n    // 1/3 of team cards should overlap\n    const bothCorrect = Math.floor(cards/3);\n    // try to use 1/3 of assassins, but don't exceed remaining correct\n    const correctAssassins = Math.min(cards - bothCorrect, Math.floor(assassins/3)); \n    // correct/bystander is remainder\n    const correctBystanders = cards - (bothCorrect + correctAssassins);\n\n    const remainderAfterCorrect = (boardRows * boardColumns) - (bothCorrect + 2*correctAssassins + 2*correctBystanders);\n\n    // try to split assassins between doubled and bystander, but use doubled if not enough bystanders left\n    const remainingAssassins = assassins - correctAssassins;\n    const bystanderAssassins = Math.min(Math.floor(remainingAssassins/2), remainderAfterCorrect - remainingAssassins);\n    const bothAssassins = remainingAssassins - bystanderAssassins;\n\n    const flatLayout: CardType[][] = fill(Array(boardRows * boardColumns), ['Bystander', 'Bystander']);\n    let step = 0;\n    step = _fill(flatLayout, ['DuetCorrect', 'DuetCorrect'], step, step + bothCorrect);\n    step = _fill(flatLayout, ['DuetCorrect', 'Assassin'], step, step + correctAssassins);\n    step = _fill(flatLayout, ['Assassin', 'DuetCorrect'], step, step + correctAssassins);\n    step = _fill(flatLayout, ['DuetCorrect', 'Bystander'], step, step + correctBystanders);\n    step = _fill(flatLayout, ['Bystander', 'DuetCorrect'], step, step + correctBystanders);\n    step = _fill(flatLayout, ['Assassin', 'Assassin'], step, step + bothAssassins);\n    step = _fill(flatLayout, ['Bystander', 'Assassin'], step, step + bystanderAssassins);\n    step = _fill(flatLayout, ['Assassin', 'Bystander'], step, step + bystanderAssassins);\n\n    shuffle(flatLayout, rand);\n    return {\n        mode: 'Duet',\n        cards: chunk(flatLayout, boardColumns), \n        startColor: 'DuetCorrect',\n        info: [\n            `Correct / Correct: ${bothCorrect} total`,\n            `Correct / Assassin: ${correctAssassins} per team`,\n            `Correct / Bystander: ${correctBystanders} per team`,\n            `Assassin / Assassin: ${bothAssassins} total`,\n            `Assassin / Bystander: ${bystanderAssassins} per team`,\n            `Bystander / Bystander: ${boardRows * boardColumns - step} total`,\n        ]\n    }\n};\n\n// fill and return end pos\nfunction _fill<T>(arr: T[], value: T, start: number, end: number): number {\n    fill(arr, value, start, end)\n    return end;\n}\n\nfunction shuffle<T>(arr: T[], rand: (min: number, max: number) => number): void {\n    for (var i = arr.length - 1; i > 0; i--) {\n        const j = rand(0, i);\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n}\n\nexport const seededRandomInt = (seed: string): (min: number, max: number) => number => {\n    const rand = seedrandom(seed);\n    return (min: number, max: number): number => Math.floor(rand() * (max - min + 1) + min);\n};\n","import { CSSProperties, useState } from 'react';\nimport BoardView from './BoardView';\nimport BoardForm, { CodenamesFormData } from './BoardForm/BoardForm';\nimport { useParams } from 'react-router';\nimport { useNavigate } from 'react-router-dom';\nimport { createLayout, decodeFormData, encodeFormData } from './BoardEncoding';\n\nexport const PAGE_SECTION_STYLE: CSSProperties = {\n    marginBottom: '48px',\n    border: '1px solid #555',\n    borderRadius: '16px',\n    padding: '24px',\n    boxShadow: '8px 8px 12px #2b2b2b',\n    minWidth: '586px',\n    flexGrow: 1,\n};\n\nconst BoardGenerator = () => {\n    const params = useParams();\n    const slug: string | undefined = params.slug;\n    let initialFormData = undefined;\n    if (slug) {\n        initialFormData = decodeFormData(slug);\n    }\n    const [formData, setFormData] = useState<CodenamesFormData | undefined>(initialFormData);\n    const navigate = useNavigate();\n\n    const setFormDataAndHash = (newFormData: CodenamesFormData) => {\n        setFormData(newFormData);\n        navigate(`/${encodeFormData(newFormData)}`)\n    }\n    \n    return (\n        <div style={{ height: '100%', margin: '48px' }}>\n            <h1>Codenames Board Generator</h1>\n            <a \n                href=\"https://github.com/tristanjohnson849/codenames-scaler\"\n                style={{ \n                    position: 'absolute',\n                    margin: '60px',\n                    top: '0px', \n                    right: '0px', \n                    color: '#777', \n                    fontSize: '18px',\n                    textDecoration: 'none'\n                }}\n                target=\"blank\"\n            >\n                Source\n            </a>\n            <div style={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'stretch',\n                maxWidth: '1000px',\n                margin: 'auto'\n            }}>\n                <BoardForm formData={formData} setFormData={(formData) => setFormDataAndHash(formData)}/>\n                {formData && <BoardView key={encodeFormData(formData)} layout={createLayout(formData)}/>}\n            </div>\n        </div>\n    );\n}\n\nexport default BoardGenerator;\n","import React from 'react';\nimport { HashRouter, Route, Routes } from 'react-router-dom';\nimport BoardGenerator from './BoardGenerator';\n\nconst App = () => (\n  <HashRouter>\n    <Routes>\n      <Route path=\"\" element={<BoardGenerator/>}/>\n      <Route path=\":slug\" element={<BoardGenerator/>}/>\n    </Routes>\n  </HashRouter>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}