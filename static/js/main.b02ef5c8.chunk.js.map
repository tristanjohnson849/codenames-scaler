{"version":3,"sources":["BoardForm/CollapseButton.tsx","BoardView.tsx","BoardForm/BasicInput.tsx","BoardForm/InputCard.tsx","BoardForm/RadioInput.tsx","BoardForm/SeedInput.tsx","BoardForm/BoardForm.tsx","BoardEncoding.ts","BoardGenerator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["COLLAPSIBLE_EASING","CollapseButton","isOpen","label","closeLabelOnOpen","style","position","fontSize","cursor","marginLeft","marginBottom","undefined","trigger","open","transitionTime","easing","padding","top","right","display","transition","transform","typeToColor","Blue","Red","Bystander","Assassin","DuetCorrect","StandardBoardView","cards","startColor","width","height","margin","background","borderRadius","border","boxShadow","isTop","color","isLeft","flex","flexDirection","map","row","colIndex","cellType","rowIndex","DuetBoardView","info","useState","isBoardOneOpen","setIsBoardOneOpen","isBoardTwoOpen","setIsBoardTwoOpen","tabIndex","onTriggerOpening","window","confirm","onTriggerClosing","containerElementProps","maxWidth","cell","item","HLight","lightColor","bottom","left","VLight","BoardView","layout","mode","BasicInput","value","defaultValue","inputProps","useControllableState","inputValue","setInputValue","type","linkButtonStyle","onClick","onChange","target","e","InputCard","title","children","minWidth","paddingLeft","paddingBottom","RadioInput","labels","checkedLabel","setCheckedLabel","marginRight","checked","SeedInput","key","randomSeed","seed","setSeed","newSeed","fontFamily","textDecoration","defaultFormValues","Standard","boardRows","boardColumns","startCards","assassins","Duet","suggestedCards","rows","columns","gameMode","Math","floor","suggestedAssassins","random","toString","slice","initialValue","stateValue","BoardForm","formData","setFormData","startValues","proxyGameMode","setProxyGameMode","_setGameMode","setRows","setColumns","setCards","setStartCards","setAssassins","setStartColor","newSeedOnGenerate","setNewSeedOnGenerate","closeConfigOnGenerate","setCloseConfigOnGenerate","error","setError","isCollapsibleOpen","setIsCollapsibleOpen","resetFormInputs","setResetFormInputs","onSubmit","preventDefault","FormData","currentTarget","entries","k","v","test","parseInt","action","totalCards","configuredCards","setTimeout","flexWrap","name","onClose","newMode","defaults","setGameMode","className","WRITE_VERSION","v1FormDataKeys","sort","v2FormDataKeys","formDataKeys","encodeFormData","orderedValues","k1","k2","localeCompare","btoa","JSON","stringify","v1DecodeFormData","maybeFormData","decodeWithKeys","validate","v2DecodeFormData","orderedKeys","length","ret","forEach","i","isValidFormData","isNaN","getStartColor","seededRandomInt","createLayout","createStandardLayout","createDuetLayout","rand","actualStartColor","blueCards","redCards","flatLayout","fill","Array","step","_fill","shuffle","chunk","bothCorrect","correctAssassins","min","correctBystanders","remainderAfterCorrect","remainingAssassins","bystanderAssassins","bothAssassins","arr","start","end","j","seedrandom","max","BoardGenerator","slug","useParams","initialFormData","version","parse","atob","decodeFormData","navigate","useNavigate","setFormDataAndHash","newFormData","href","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b02ef5c8.chunk.js","sourcesContent":["import Collapsible from \"react-collapsible\";\n\ninterface CollapseButtonProps {\n    isOpen: boolean;\n    label?: string;\n    closeLabelOnOpen?: boolean\n}\n\nexport const COLLAPSIBLE_EASING = \"cubic-bezier(.5,.9,.2,1.0)\";\nexport const COLLAPSIBLE_TIME = 400;\n\nconst CollapseButton = ({isOpen, label, closeLabelOnOpen = true}: CollapseButtonProps) => {\n    return (\n        <div style={{ \n            position: 'relative',\n            fontSize: '24px',\n            cursor: 'pointer',\n            marginLeft: '16px',\n            marginBottom: isOpen && !closeLabelOnOpen ? '16px' : undefined\n        }}>\n            {closeLabelOnOpen \n                ? <Collapsible\n                    trigger=\"\"\n                    open={!isOpen}\n                    transitionTime={COLLAPSIBLE_TIME}\n                    easing={COLLAPSIBLE_EASING}\n                >{label}</Collapsible>\n                : label\n            }\n            <div\n                style={{\n                    position: 'absolute',\n                    padding: '8px',\n                    top: '-12px',\n                    right: '2px',\n                    display: 'block',\n                    transition: 'transform 300ms',\n                    transform: isOpen ? 'rotateZ(180deg)' : ''\n                }}\n            >⋁</div>\n        </div>\n    );\n}\n\nexport default CollapseButton;","import React, { useState } from \"react\";\nimport Collapsible from \"react-collapsible\";\nimport { BoardLayout } from \"./BoardEncoding\";\nimport CollapseButton from \"./BoardForm/CollapseButton\";\n\nexport type CardType = 'Blue' | 'Red' | 'Bystander' | 'Assassin' | 'DuetCorrect';\n\nexport interface BoardProps {\n    layout: BoardLayout<CardType | CardType[]>;\n};\n\nexport const typeToColor: { [K in CardType]: string } = {\n    Blue: '#268bad',\n    Red: '#c9461d',\n    Bystander: '#af926e',\n    Assassin: '#1b1b1b',\n    DuetCorrect: '#4CBB17'\n}\n\nconst BoardView: React.FC<BoardProps> = ({layout: { cards, mode, startColor, info }}) => (\n    mode === 'Standard'\n        ? <StandardBoardView cards={cards as CardType[][]} startColor={startColor}/>\n        : <DuetBoardView cards={cards as CardType[][][]} info={info}/>\n);\n\n\nconst StandardBoardView: React.FC<{cards: CardType[][], startColor: CardType}> = ({ cards, startColor }) => (\n    <div style={{\n        position: 'relative',\n        display: 'flex',\n        width: '75vh',\n        height: '75vh',\n        margin: 'auto',\n        padding: '32px',\n        background: '#434343',\n        borderRadius: '12px',\n        border: '1px solid #777',\n        boxShadow: '8px 8px 12px #2b2b2b',\n    }}>\n        <HLight isTop={true} color={startColor} />\n        <HLight isTop={false} color={startColor} />\n        <VLight isLeft={true} color={startColor} />\n        <VLight isLeft={false} color={startColor} />\n        <div style={{\n            flex: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            borderRadius: '12px',\n            background: '#2b2b2b',\n            border: '1px solid #777',\n            padding: '8px',\n        }}>\n            {cards.map((row, colIndex) =>\n                <div key={colIndex} style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    flex: 1\n                }}>\n                    {row.map((cellType, rowIndex) =>\n                        <div key={`${colIndex}-${rowIndex}`} style={{\n                            flex: 1,\n                            background: typeToColor[cellType],\n                            margin: '4px',\n                            borderRadius: '12px',\n                            boxShadow: '6px 6px 8px #1c1c1c',\n                            border: '1px solid #555'\n                        }} />\n                    )}\n                </div>\n            )}\n        </div>\n    </div>\n);\n\nconst DuetBoardView: React.FC<{cards: CardType[][][], info?: string[]}> = ({ cards, info}) => {\n    const [isBoardOneOpen, setIsBoardOneOpen] = useState<boolean>(false);\n    const [isBoardTwoOpen, setIsBoardTwoOpen] = useState<boolean>(false);\n    return (\n        <div>\n            <Collapsible \n                tabIndex={0}\n                trigger={<CollapseButton isOpen={isBoardOneOpen} label={\"Team 1\"} closeLabelOnOpen={false}/>}\n                open={isBoardOneOpen}\n                onTriggerOpening={() => {\n                    if (window.confirm(\"For Team 1's eyes only - are you sure?\")) {\n                        setIsBoardOneOpen(true);\n                    }\n                }}                \n                onTriggerClosing={() => setIsBoardOneOpen(false)}\n                containerElementProps={{style: {\n                    maxWidth: '1200px',\n                    margin: '48px auto',\n                    border: '1px solid #555',\n                    borderRadius: '16px',\n                    padding: '16px',\n                    boxShadow: '8px 8px 12px #2b2b2b'\n                }}}\n            >\n                <StandardBoardView cards={cards.map(row => row.map(cell => cell[0]))} startColor=\"DuetCorrect\"/>\n            </Collapsible>\n            <Collapsible \n                tabIndex={0}\n                trigger={<CollapseButton label={\"Team 2\"} isOpen={isBoardTwoOpen} closeLabelOnOpen={false}/>}\n                open={isBoardTwoOpen}\n                onTriggerOpening={() => {\n                    if (window.confirm(\"For Team 2's eyes only - are you sure?\")) {\n                        setIsBoardTwoOpen(true);\n                    }\n                }}\n                onTriggerClosing={() => setIsBoardTwoOpen(false)}\n                containerElementProps={{style: {\n                    maxWidth: '1200px',\n                    margin: '48px auto',\n                    border: '1px solid #555',\n                    borderRadius: '16px',\n                    padding: '16px',\n                    boxShadow: '8px 8px 12px #2b2b2b'\n                }}}\n            >\n                <StandardBoardView cards={cards.map(row => row.map(cell => cell[1]))} startColor=\"DuetCorrect\"/>\n            </Collapsible>\n            {info && <div style={{\n                    maxWidth: '1200px',\n                    margin: '48px auto',\n                    border: '1px solid #555',\n                    borderRadius: '16px',\n                    padding: '16px',\n                    boxShadow: '8px 8px 12px #2b2b2b'\n                }}>\n                <h3>Board Info</h3>\n                <ul>\n                    {info.map(item => <li style={{ margin: '8px 0'}}>{item}</li>)}\n                </ul>\n            </div>}\n        </div>\n    );\n};\n\n\nconst HLight: React.FC<{ isTop: boolean, color?: CardType }> = ({ isTop, color = 'Bystander' }) => {\n    const lightColor = typeToColor[color];\n    return <div style={{\n        position: 'absolute',\n        top: isTop ? 0 : undefined,\n        bottom: isTop ? undefined : 0,\n        left: '40%',\n        height: '32px',\n        width: '20%',\n        margin: 'auto',\n        transform: `perspective(10px) rotateX(${isTop ? '-' : ''}1deg)`,\n        borderRadius: isTop ? '4px 4px 8px 8px' : '8px 8px 4px 4px',\n        background: `linear-gradient(to right, ${lightColor} 5%, #FFF 45%, #FFF 55%, ${lightColor} 95%)`,\n    }} />;\n};\n\nconst VLight: React.FC<{ isLeft: boolean, color?: CardType }> = ({ isLeft, color = 'Bystander' }) => {\n    const lightColor = typeToColor[color];\n    return <div style={{\n        position: 'absolute',\n        left: isLeft ? 0 : undefined,\n        right: isLeft ? undefined : 0,\n        top: '40%',\n        height: '20%',\n        width: '32px',\n        margin: 'auto',\n        transform: `perspective(10px) rotateY(${isLeft ? '' : '-'}1deg)`,\n        borderRadius: isLeft ? '4px 8px 8px 4px' : '8px 4px 4px 8px',\n        background: `linear-gradient(to bottom, ${lightColor} 5%, #FFF 45%, #FFF 55%, ${lightColor} 95%)`,\n    }} />\n};\n\nexport default BoardView;","import React from \"react\";\nimport { useControllableState, linkButtonStyle } from \"./BoardForm\";\n\nexport const BasicInput: React.FC<{ label: string; } & React.ComponentProps<\"input\">> = ({ label, value, defaultValue, ...inputProps }) => {\n    const [inputValue, setInputValue] = useControllableState(value, defaultValue || '');\n\n    return (\n        <label style={{ display: 'flex', flexDirection: 'column', margin: '8px' }}>\n            <span>{label} {defaultValue !== undefined && (\n                <button\n                    type=\"button\"\n                    style={{ ...linkButtonStyle, color: '#888', fontSize: '14px' }}\n                    onClick={() => {\n                        setInputValue(defaultValue);\n                        // @ts-ignore\n                        inputProps.onChange && inputProps.onChange({ target: { value: defaultValue } });\n                    }}\n                >\n                    Suggested: {defaultValue}\n                </button>\n            )}</span>\n            <input\n                {...inputProps}\n                value={inputValue}\n                onChange={(e) => {\n                    setInputValue(e.target.value);\n                    inputProps.onChange && inputProps.onChange(e);\n                }} />\n        </label>\n    );\n};\n","import React, { CSSProperties } from \"react\";\n\n\nexport interface InputCardProps {\n    title: string;\n    style?: CSSProperties;\n}\n\nexport const InputCard: React.FC<InputCardProps> = ({ title, style = {}, children }) => {\n    return (\n        <div style={{ marginLeft: '24px', marginBottom: '24px', maxWidth: '33%', minWidth: '180px', ...style }}>\n            <div style={{ paddingLeft: '16px', paddingBottom: '8px' }}><b>{title}</b></div>\n            <div style={{\n                border: '1px solid #555',\n                padding: '16px',\n                borderRadius: '16px',\n                boxShadow: '6px 6px 8px #2b2b2b',\n            }}>\n                {children}\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { useControllableState, linkButtonStyle } from \"./BoardForm\";\n\nexport const RadioInput: React.FC<{ title?: string; labels: string[]; } & React.ComponentProps<\"input\">> = ({ title, labels, value, defaultValue, onChange, ...inputProps }) => {\n    const [checkedLabel, setCheckedLabel] = useControllableState(value, defaultValue || labels[0]);\n\n    return (\n        <div>\n            {(title || defaultValue !== undefined) && <>\n                <div>\n                    {title}\n                    {defaultValue !== undefined && (\n                        <button\n                            type=\"button\"\n                            style={{ ...linkButtonStyle, color: '#888', fontSize: '14px' }}\n                            onClick={() => {\n                                // @ts-ignore\n                                onChange && onChange({ target: { value: defaultValue } });\n                                setCheckedLabel(defaultValue);\n                            }}\n                        >\n                            Suggested: {defaultValue}\n                        </button>\n                    )}\n                </div>\n                <hr />\n            </>}\n            {labels.map((label) => (\n                <label style={{ marginRight: '6px' }}>{label}\n                    <input\n                        type=\"radio\"\n                        value={label}\n                        checked={label === checkedLabel}\n                        onChange={(e) => {\n                            setCheckedLabel(label);\n                            onChange && onChange(e);\n                        }}\n                        {...inputProps} />\n                </label>\n            ))}\n        </div>\n    );\n};\n","import React from \"react\";\nimport { useControllableState, randomSeed, linkButtonStyle } from \"./BoardForm\";\n\nexport const SeedInput: React.FC<React.ComponentProps<\"input\">> = ({ key, value, onChange, ...inputProps }) => {\n    const [seed, setSeed] = useControllableState(value, randomSeed());\n\n    return (\n        <div>\n            <div>\n                Seed\n                <button\n                    type=\"button\"\n                    style={{ ...linkButtonStyle, color: '#888', fontSize: '14px' }}\n                    onClick={() => {\n                        const newSeed = randomSeed();\n                        setSeed(newSeed);\n                        // @ts-ignore\n                        onChange && onChange({ target: { value: newSeed } });\n                    }}\n                >\n                    New Seed\n                </button>\n            </div>\n            <input\n                {...inputProps}\n                type=\"text\"\n                value={seed}\n                onChange={(e) => {\n                    setSeed(e.target.value);\n                    onChange && onChange(e);\n                }} />\n        </div>\n    );\n};\n","import React, { FormEventHandler, useState } from \"react\";\nimport Collapsible from \"react-collapsible\";\nimport { typeToColor } from \"../BoardView\";\nimport { BasicInput } from \"./BasicInput\";\nimport CollapseButton, {COLLAPSIBLE_EASING, COLLAPSIBLE_TIME} from \"./CollapseButton\";\nimport { InputCard } from \"./InputCard\";\nimport { RadioInput } from \"./RadioInput\";\nimport { SeedInput } from \"./SeedInput\";\n\nexport type GameMode = 'Standard' | 'Duet';\n\nexport interface CodenamesFormData {\n    boardRows: number;\n    boardColumns: number;\n    cards: number;\n    startCards: number;\n    assassins: number;\n    startColor: 'Blue' | 'Red' | 'Random';\n    seed: string;\n    mode: GameMode;\n    [key: string]: string | number;\n}\n\nexport interface ModeConfig {\n    mode: GameMode;\n    \n}\n  \nexport interface BoardFormProps {\n    formData?: CodenamesFormData;\n    setFormData: (formData: CodenamesFormData) => void\n}\n\nexport const linkButtonStyle = {\n    padding: 'none',\n    background: 'none',\n    border: 'none',\n    cursor: 'pointer',\n    fontFamily: 'Helvetica,Arial,sans-serif',\n    fontSize: '16px',\n    textDecoration: 'underline',\n    color: '#FFF'\n};\n\nconst defaultFormValues: { [mode in GameMode]: CodenamesFormData } = {\n    Standard: {\n        boardRows: 5,\n        boardColumns: 5,\n        cards: 8,\n        startCards: 1,\n        assassins: 1,\n        startColor: 'Random',\n        mode: 'Standard',\n        seed: ''\n    },\n    Duet: {\n        boardRows: 5,\n        boardColumns: 5,\n        cards: 9,\n        startCards: 0,\n        assassins: 3,\n        startColor: 'Random',\n        mode: 'Duet',\n        seed: ''\n    }\n};\n\n\nconst BoardForm: React.FC<BoardFormProps> = ({ formData, setFormData }) => {\n    const startValues = formData\n        ? formData\n        : {\n            ...defaultFormValues.Standard,\n            seed: randomSeed()\n        };\n\n    // for animations\n    const [proxyGameMode, setProxyGameMode] = useState(startValues.mode);\n    const [mode, _setGameMode] = useState(startValues.mode);\n\n    const [rows, setRows] = useState(startValues.boardRows);\n    const [columns, setColumns] = useState(startValues.boardColumns);\n    const [cards, setCards] = useState(startValues.cards);\n    const [startCards, setStartCards] = useState(startValues.startCards);\n    const [assassins, setAssassins] = useState(startValues.assassins);\n    const [startColor, setStartColor] = useState(startValues.startColor);\n    const [seed, setSeed] = useState(startValues.seed);\n\n    const [newSeedOnGenerate, setNewSeedOnGenerate] = useState<boolean>(true);\n    const [closeConfigOnGenerate, setCloseConfigOnGenerate] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    const [isCollapsibleOpen, setIsCollapsibleOpen] = useState<boolean>(true);\n    const [resetFormInputs, setResetFormInputs] = useState<boolean>(false);\n\n    const setErrorTimeout: typeof setError = (action) => {\n        setTimeout(() => setError(null), 6 * 1000);\n        setError(action);\n    }\n\n    const setGameMode = (newMode: GameMode) => {\n        if (mode !== newMode) {\n            const defaults = defaultFormValues[newMode];\n            setRows(defaults.boardRows);\n            setColumns(defaults.boardColumns);\n            setCards(defaults.cards);\n            setStartCards(defaults.startCards);\n            setAssassins(defaults.assassins);\n            setStartColor(defaults.startColor);\n            setResetFormInputs(false);\n        }\n        _setGameMode(newMode);\n    };\n\n    const onFormSubmit: FormEventHandler<HTMLFormElement> = (e) => {\n        e.preventDefault();\n        const formData: any = {};\n        for (let [k, v] of (new FormData(e.currentTarget)).entries()) {\n            formData[k] = /^\\d+$/.test(v as string) ? parseInt(v as string) : v;\n        }\n\n        if (newSeedOnGenerate) {\n            const newSeed = randomSeed();\n            formData.seed = newSeed;\n            setSeed(newSeed);\n        }\n        const totalCards = formData.boardRows * formData.boardColumns;\n\n        const configuredCards = mode === 'Standard' \n            ? formData.cards * 2 + formData.startCards + formData.assassins\n            : formData.cards + formData.assassins;\n        if (configuredCards > totalCards) {\n            setErrorTimeout(`Too many configured cards (${configuredCards}) for this board (${formData.boardRows}x${formData.boardColumns}=${totalCards})`);\n            return false;\n        } else {\n            if (closeConfigOnGenerate) {\n                setIsCollapsibleOpen(false);\n            }\n            setFormData(formData);\n        }\n    };\n\n    return (\n        <Collapsible \n            tabIndex={0}\n            open={isCollapsibleOpen}\n            onTriggerOpening={() => setIsCollapsibleOpen(true)}\n            onTriggerClosing={() => setIsCollapsibleOpen(false)}\n            trigger={<CollapseButton isOpen={isCollapsibleOpen} label=\"Game Config\"/>}\n            containerElementProps={{style: {\n                maxWidth: '1200px',\n                margin: '48px auto',\n                border: '1px solid #555',\n                borderRadius: '16px',\n                padding: '16px',\n                boxShadow: '8px 8px 12px #2b2b2b',\n            }}}\n            transitionTime={COLLAPSIBLE_TIME}\n            easing={COLLAPSIBLE_EASING}\n        >\n            <form onSubmit={onFormSubmit}>\n                <div style={{\n                    display: 'flex',\n                    flexWrap: 'wrap'\n                }}>\n                    {/* TODO confirm board reset */}\n                    <InputCard title=\"Game Mode\">\n                        <RadioInput labels={['Standard', 'Duet']} name=\"mode\" value={mode} onChange={(e) => {\n                            if (!window.confirm('This will reset config to default values - are you sure?')) {\n                                return;\n                            }\n                            setProxyGameMode(e.target.value as any);\n                            setResetFormInputs(true);\n                        }} />\n                    </InputCard>\n                </div>\n                <hr style={{ height: '1px', border: 'none', background: '#555', margin: '24px 0' }} />\n                <Collapsible \n                    trigger=\"\" \n                    open={!resetFormInputs} onClose={() => setGameMode(proxyGameMode)}\n                    transitionTime={COLLAPSIBLE_TIME}\n                    easing={COLLAPSIBLE_EASING}\n                >\n                    <div style={{\n                        display: 'flex',\n                        flexWrap: 'wrap',\n                        marginBottom: '24px'\n                    }}>\n                        \n                        <InputCard title=\"Board\">\n                            <BasicInput label=\"Rows\" type=\"number\" name=\"boardRows\" value={rows} onChange={(e) => setRows(parseInt(e.target.value))} defaultValue={defaultFormValues[mode].boardRows} />\n                            <BasicInput label=\"Columns\" type=\"number\" name=\"boardColumns\" value={columns} onChange={(e) => setColumns(parseInt(e.target.value))} defaultValue={defaultFormValues[mode].boardColumns} />\n                        </InputCard>\n                        <InputCard title=\"Game\">\n                            <BasicInput label=\"Team Cards\" type=\"number\" name=\"cards\" value={cards} onChange={(e) => setCards(parseInt(e.target.value))} defaultValue={suggestedCards(rows, columns, mode)} />\n                            <BasicInput label=\"Assassins\" type=\"number\" name=\"assassins\" value={assassins} onChange={(e) => setAssassins(parseInt(e.target.value))} defaultValue={suggestedAssassins(rows, columns, mode)} />\n                        </InputCard>\n                        {mode==='Standard' && <InputCard title=\"Standard Mode\">\n                            <BasicInput label=\"Start Handicap\" type=\"number\" name=\"startCards\" value={startCards} onChange={(e) => setStartCards(parseInt(e.target.value))} defaultValue={defaultFormValues[mode].startCards} />\n                            <RadioInput title=\"Starting Team\" labels={['Red', 'Blue', 'Random']} name=\"startColor\" value={startColor} onChange={(e) => setStartColor(e.target.value as any)} defaultValue=\"Random\" />\n                        </InputCard>}\n                        <InputCard title=\"Random\">\n                            <SeedInput name=\"seed\" value={seed} onChange={(e) => setSeed(e.target.value)}/>\n                        </InputCard>\n                        \n                    </div>\n                    <button style={{ \n                        background: typeToColor[mode === 'Standard' ? 'Blue' : 'DuetCorrect'], \n                        marginRight: '12px' \n                    }}>\n                        Generate\n                    </button>\n                    <label style={{ marginRight: '12px', color: '#888', fontSize: '14px' }}>\n                        <input type=\"checkbox\" checked={newSeedOnGenerate} onChange={(e) => setNewSeedOnGenerate(e.target.checked)}/>\n                        with a new random seed\n                    </label>\n                    <label style={{ marginRight: '12px', color: '#888', fontSize: '14px' }}>\n                        <input type=\"checkbox\" checked={closeConfigOnGenerate} onChange={(e) => setCloseConfigOnGenerate(e.target.checked)}/>\n                        Close config?\n                    </label>\n\n                    <button\n                        type=\"button\"\n                        onClick={() => {\n                            const defaults = defaultFormValues[mode];\n                            setRows(defaults.boardRows);\n                            setColumns(defaults.boardColumns);\n                            setCards(defaults.cards);\n                            setStartCards(defaults.startCards);\n                            setAssassins(defaults.assassins);\n                            setStartColor(defaults.startColor);\n                            setSeed(randomSeed());\n                        }}\n                        style={{ \n                            background: typeToColor[mode === 'Standard' ? 'Red' : 'Bystander'],\n                            marginRight: '12px' \n                        }}>\n                        Reset Defaults\n                    </button>\n                    {error && <span className=\"fade-out\" style={{ color: '#c9461d' }}>{error}</span>}\n                </Collapsible>\n            </form>\n        </Collapsible>\n    );\n};\n\nconst suggestedCards = (rows: number, columns: number, gameMode: GameMode) => {\n    if (!rows || !columns) {\n        return defaultFormValues[gameMode].cards;\n    }\n    if (gameMode === 'Standard') {\n        return Math.floor(rows * columns/3);\n    } else {\n        return Math.floor(rows * columns/3) + 1;\n    }\n};\n\nconst suggestedAssassins = (rows: number, columns: number, gameMode: GameMode) => \n    Math.floor(rows * columns / (gameMode === 'Standard' ? 15 : 8)) || defaultFormValues[gameMode].assassins;\n\nexport const randomSeed = (): string => Math.random().toString(36).slice(2);\n\nexport function useControllableState<T>(value: T, initialValue?: T | undefined): [state: T, setState: (action: React.SetStateAction<T>) => void] {\n    const [stateValue, setState] = useState(initialValue || value);\n    const effectiveValue = value !== undefined ? value : stateValue;\n    return [effectiveValue, setState];\n}\n\nexport default BoardForm;\n","\nimport chunk from 'lodash/chunk';\nimport fill from 'lodash/fill';\nimport seedrandom from 'seedrandom';\nimport { CodenamesFormData, GameMode } from './BoardForm/BoardForm';\nimport { CardType } from './BoardView';\n\nexport type FormDataVersion = 0 | 1 | 2;\n// eslint-disable-next-line\nconst UNKNOWN_VERSION = 0;\nconst WRITE_VERSION = 2;\n\nconst v1FormDataKeys = [\n    'boardRows',\n    'boardColumns',\n    'cards',\n    'startCards',\n    'startColor',\n    'assassins',\n    'seed'\n].sort();\n\nconst v2FormDataKeys = [\n    ...v1FormDataKeys,\n    'mode',\n].sort();\n\nconst formDataKeys = [\n    [],\n    v1FormDataKeys,\n    v2FormDataKeys\n];\n\nexport const encodeFormData = (formData: CodenamesFormData): string => {\n    const orderedValues = formDataKeys[WRITE_VERSION]\n                            .map((k): [k: string, v: string | number] => [k, formData[k]])\n                            .sort(([k1], [k2]) => k1.localeCompare(k2))\n                            .map(([_, v]) => v);\n    return btoa(JSON.stringify([WRITE_VERSION, ...orderedValues]));\n}\n\nexport const decodeFormData = (slug: string): CodenamesFormData | undefined => {\n    let orderedValues: any[] = [];\n    let version: FormDataVersion = 0;\n    try {\n        [version, ...orderedValues] = JSON.parse(atob(slug));\n    } catch {\n        return undefined;\n    }\n\n    switch(version) {\n        case 1:\n            return v1DecodeFormData(orderedValues);\n        case 2:\n            return v2DecodeFormData(orderedValues);\n        default:\n            return undefined;\n    }\n};\n\nconst v1DecodeFormData = (orderedValues: any[]): CodenamesFormData | undefined => {\n    const maybeFormData = decodeWithKeys(orderedValues, v1FormDataKeys);\n    if (maybeFormData) {\n        maybeFormData.mode = 'Standard';\n    }\n\n    return validate(maybeFormData);\n}\n\nconst v2DecodeFormData = (orderedValues: any[]): CodenamesFormData | undefined => \n    validate(decodeWithKeys(orderedValues, v2FormDataKeys));\n\nconst decodeWithKeys = (orderedValues: any[], orderedKeys: string[]): CodenamesFormData | undefined => {\n    if (orderedValues && orderedValues.length <= orderedKeys.length) {\n        const ret: any = {};\n        orderedKeys.forEach((key, i) => ret[key] = orderedValues[i]);\n        return ret;\n    }\n\n    return undefined;\n};\n\nconst validate = (maybeFormData: any): CodenamesFormData | undefined => {\n    if (isValidFormData(maybeFormData)) {\n        return maybeFormData;\n    }\n    return undefined;\n};\n\nconst isValidFormData = (maybeFormData: any): boolean => (\n    maybeFormData && \n    maybeFormData.boardRows && \n    maybeFormData.boardColumns && \n    maybeFormData.cards && \n    !isNaN(maybeFormData.startCards) && \n    !isNaN(maybeFormData.assassins) && \n    maybeFormData.seed &&\n    maybeFormData.mode\n);\n\nexport const getStartColor = (\n    startColor: 'Random' | 'Blue' | 'Red', \n    seed: string\n): 'Blue' | 'Red' => {\n    if (startColor === 'Random') {\n        return seededRandomInt(seed + 'start')(0, 1) ? 'Blue' : 'Red';\n    } else {\n        return startColor;\n    }\n}\n\nexport interface BoardLayout<C> {\n    mode: GameMode;\n    cards: C[][]\n    startColor: CardType;\n    info?: string[];\n}\n\nexport const createLayout = (formData: CodenamesFormData): BoardLayout<CardType | CardType[]> => (\n    formData.mode === 'Standard'\n        ? createStandardLayout(formData)\n        : createDuetLayout(formData)\n);\n\nconst createStandardLayout = ({\n    boardRows,\n    boardColumns,\n    cards,\n    startCards,\n    startColor,\n    assassins,\n    seed\n}: CodenamesFormData): BoardLayout<CardType> =>  {\n    const rand = seededRandomInt(seed);\n\n    const actualStartColor = getStartColor(startColor, seed);\n    const blueCards = cards + (actualStartColor === 'Blue' ? startCards : 0);\n    const redCards = cards + (actualStartColor === 'Red' ? startCards : 0);\n\n    const flatLayout: CardType[] = fill(Array(boardRows * boardColumns), 'Bystander');\n    let step = 0;\n    step = _fill(flatLayout, 'Blue', step, step + blueCards)\n    step = _fill(flatLayout, 'Red', step, step + redCards);\n    _fill(flatLayout, 'Assassin', step, step + assassins);\n\n    shuffle(flatLayout, rand);\n\n    return {mode: 'Standard', cards: chunk(flatLayout, boardColumns), startColor: getStartColor(startColor, seed)};\n};\n\nconst createDuetLayout = ({\n    boardRows,\n    boardColumns,\n    cards,\n    assassins,\n    seed,\n}: CodenamesFormData): BoardLayout<CardType[]> =>  {\n    const rand = seededRandomInt(seed);\n\n    // 1/3 of team cards should overlap\n    const bothCorrect = Math.floor(cards/3);\n    // try to use 1/3 of assassins, but don't exceed remaining correct\n    const correctAssassins = Math.min(cards - bothCorrect, Math.floor(assassins/3)); \n    // correct/bystander is remainder\n    const correctBystanders = cards - (bothCorrect + correctAssassins);\n\n    const remainderAfterCorrect = (boardRows * boardColumns) - (bothCorrect + 2*correctAssassins + 2*correctBystanders);\n\n    // try to split assassins between doubled and bystander, but use doubled if not enough bystanders left\n    const remainingAssassins = assassins - correctAssassins;\n    const bystanderAssassins = Math.min(Math.floor(remainingAssassins/2), remainderAfterCorrect - remainingAssassins);\n    const bothAssassins = remainingAssassins - bystanderAssassins;\n\n    const flatLayout: CardType[][] = fill(Array(boardRows * boardColumns), ['Bystander', 'Bystander']);\n    let step = 0;\n    step = _fill(flatLayout, ['DuetCorrect', 'DuetCorrect'], step, step + bothCorrect);\n    step = _fill(flatLayout, ['DuetCorrect', 'Assassin'], step, step + correctAssassins);\n    step = _fill(flatLayout, ['Assassin', 'DuetCorrect'], step, step + correctAssassins);\n    step = _fill(flatLayout, ['DuetCorrect', 'Bystander'], step, step + correctBystanders);\n    step = _fill(flatLayout, ['Bystander', 'DuetCorrect'], step, step + correctBystanders);\n    step = _fill(flatLayout, ['Assassin', 'Assassin'], step, step + bothAssassins);\n    step = _fill(flatLayout, ['Bystander', 'Assassin'], step, step + bystanderAssassins);\n    step = _fill(flatLayout, ['Assassin', 'Bystander'], step, step + bystanderAssassins);\n\n    shuffle(flatLayout, rand);\n    return {\n        mode: 'Duet',\n        cards: chunk(flatLayout, boardColumns), \n        startColor: 'DuetCorrect',\n        info: [\n            `Correct / Correct: ${bothCorrect} total`,\n            `Correct / Assassin: ${correctAssassins} per team`,\n            `Correct / Bystander: ${correctBystanders} per team`,\n            `Assassin / Assassin: ${bothAssassins} total`,\n            `Assassin / Bystander: ${bystanderAssassins} per team`,\n            `Bystander / Bystander: ${boardRows * boardColumns - step} total`,\n        ]\n    }\n};\n\n// fill and return end pos\nfunction _fill<T>(arr: T[], value: T, start: number, end: number): number {\n    fill(arr, value, start, end)\n    return end;\n}\n\nfunction shuffle<T>(arr: T[], rand: (min: number, max: number) => number): void {\n    for (var i = arr.length - 1; i > 0; i--) {\n        const j = rand(0, i);\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n}\n\nexport const seededRandomInt = (seed: string): (min: number, max: number) => number => {\n    const rand = seedrandom(seed);\n    return (min: number, max: number): number => Math.floor(rand() * (max - min + 1) + min);\n};\n","import { useState } from 'react';\nimport BoardView from './BoardView';\nimport BoardForm, { CodenamesFormData } from './BoardForm/BoardForm';\nimport { useParams } from 'react-router';\nimport { useNavigate } from 'react-router-dom';\nimport { createLayout, decodeFormData, encodeFormData } from './BoardEncoding';\n\nconst BoardGenerator = () => {\n    const params = useParams();\n    const slug: string | undefined = params.slug;\n    let initialFormData = undefined;\n    if (slug) {\n        initialFormData = decodeFormData(slug);\n    }\n    const [formData, setFormData] = useState<CodenamesFormData | undefined>(initialFormData);\n    const navigate = useNavigate();\n\n    const setFormDataAndHash = (newFormData: CodenamesFormData) => {\n        setFormData(newFormData);\n        navigate(`/${encodeFormData(newFormData)}`)\n    }\n    \n    return (\n        <div style={{ height: '100%', margin: '48px' }}>\n            <h1>Codenames Board Generator</h1>\n            <a \n                href=\"https://github.com/tristanjohnson849/codenames-scaler\"\n                style={{ \n                    position: 'absolute',\n                    margin: '60px',\n                    top: '0px', \n                    right: '0px', \n                    color: '#777', \n                    fontSize: '18px',\n                    textDecoration: 'none'\n                }}\n                target=\"blank\"\n            >\n                Source\n            </a>\n            <BoardForm formData={formData} setFormData={(formData) => setFormDataAndHash(formData)}/>\n            {formData && <BoardView key={encodeFormData(formData)} layout={createLayout(formData)}/>}\n        </div>\n    );\n}\n\nexport default BoardGenerator;\n","import React from 'react';\nimport { HashRouter, Route, Routes } from 'react-router-dom';\nimport BoardGenerator from './BoardGenerator';\n\nconst App = () => (\n  <HashRouter>\n    <Routes>\n      <Route path=\"\" element={<BoardGenerator/>}/>\n      <Route path=\":slug\" element={<BoardGenerator/>}/>\n    </Routes>\n  </HashRouter>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}