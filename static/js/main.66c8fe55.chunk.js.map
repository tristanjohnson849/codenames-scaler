{"version":3,"sources":["BoardView.tsx","BoardForm.tsx","BoardEncoding.ts","BoardGenerator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["typeToColor","Blue","Red","Bystander","Assassin","HLight","isTop","color","lightColor","style","position","top","undefined","bottom","left","height","width","margin","transform","borderRadius","background","VLight","isLeft","right","BoardView","layout","startColor","display","padding","border","boxShadow","flex","flexDirection","map","row","cellType","linkButtonStyle","cursor","fontFamily","fontSize","textDecoration","defaultFormValues","boardRows","boardColumns","cards","startCards","assassins","seed","InputCard","title","inputs","marginLeft","paddingLeft","paddingBottom","BasicInput","label","value","defaultValue","inputProps","useControllableState","inputValue","setInputValue","type","onClick","onChange","target","e","RadioInput","labels","checkedLabel","setCheckedLabel","marginRight","checked","randomSeed","Math","random","toString","slice","SeedInput","setSeed","newSeed","initialValue","useState","stateValue","BoardForm","formData","setFormData","startValues","rows","setRows","columns","setColumns","setCards","setStartCards","setAssassins","setStartColor","newSeedOnGenerate","setNewSeedOnGenerate","error","setError","onSubmit","preventDefault","FormData","currentTarget","entries","k","v","test","parseInt","action","totalCards","configuredCards","setTimeout","flexWrap","marginBottom","name","floor","className","WRITE_VERSION","v1FormDataKeys","Object","keys","sort","v1DecodeFormData","orderedValues","decodeWithKeys","orderedKeys","length","ret","forEach","key","i","isValidFormData","isNaN","getStartColor","seededRandomInt","createLayout","rand","actualStartColor","blueCards","redCards","flatLayout","fill","Array","arr","j","shuffle","chunk","seedrandom","min","max","BoardGenerator","slug","useParams","initialFormData","version","JSON","parse","atob","decodeFormData","navigate","useNavigate","setFormDataAndHash","newFormData","k1","k2","localeCompare","btoa","stringify","encodeFormData","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66c8fe55.chunk.js","sourcesContent":["import React from \"react\";\n\nexport type CardType = 'Blue' | 'Red' | 'Bystander' | 'Assassin';\n\nexport interface BoardProps {\n    layout: CardType[][];\n    startColor?: 'Red' | 'Blue';\n};\n\nconst typeToColor: { [K in CardType]: string } = {\n    Blue: '#268bad',\n    Red: '#c9461d',\n    Bystander: '#af926e',\n    Assassin: '#1b1b1b',\n}\n\nconst BoardView: React.FC<BoardProps> = ({ layout, startColor }) => (\n    <div style={{\n        position: 'relative',\n        display: 'flex',\n        width: '80vh',\n        height: '80vh',\n        margin: 'auto',\n        padding: '32px',\n        background: '#434343',\n        borderRadius: '12px',\n        border: '1px solid #777',\n        boxShadow: '8px 8px 12px #2b2b2b',\n    }}>\n        <HLight isTop={true} color={startColor} />\n        <HLight isTop={false} color={startColor} />\n        <VLight isLeft={true} color={startColor} />\n        <VLight isLeft={false} color={startColor} />\n        <div style={{\n            flex: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            borderRadius: '12px',\n            background: '#2b2b2b',\n            border: '1px solid #777',\n            padding: '8px',\n        }}>\n            {layout.map((row) =>\n                <div style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    flex: 1\n                }}>\n                    {row.map((cellType) =>\n                        <div style={{\n                            flex: 1,\n                            background: typeToColor[cellType],\n                            margin: '4px',\n                            borderRadius: '12px',\n                            boxShadow: '6px 6px 8px #1c1c1c',\n                            border: '1px solid #555'\n                        }} />\n                    )}\n                </div>\n            )}\n        </div>\n    </div>\n);\n\nconst HLight: React.FC<{ isTop: boolean, color?: 'Blue' | 'Red' }> = ({ isTop, color }) => {\n    const lightColor = color ? typeToColor[color] : '#FFE800';\n    return <div style={{\n        position: 'absolute',\n        top: isTop ? 0 : undefined,\n        bottom: isTop ? undefined : 0,\n        left: '40%',\n        height: '32px',\n        width: '20%',\n        margin: 'auto',\n        transform: `perspective(10px) rotateX(${isTop ? '-' : ''}1deg)`,\n        borderRadius: isTop ? '4px 4px 8px 8px' : '8px 8px 4px 4px',\n        background: `linear-gradient(to right, ${lightColor} 5%, #FFF 45%, #FFF 55%, ${lightColor} 95%)`,\n    }} />;\n};\n\nconst VLight: React.FC<{ isLeft: boolean, color?: 'Blue' | 'Red' }> = ({ isLeft, color }) => {\n    const lightColor = color ? typeToColor[color] : '#FFE800';\n    return <div style={{\n        position: 'absolute',\n        left: isLeft ? 0 : undefined,\n        right: isLeft ? undefined : 0,\n        top: '40%',\n        height: '20%',\n        width: '32px',\n        margin: 'auto',\n        transform: `perspective(10px) rotateY(${isLeft ? '' : '-'}1deg)`,\n        borderRadius: isLeft ? '4px 8px 8px 4px' : '8px 4px 4px 8px',\n        background: `linear-gradient(to bottom, ${lightColor} 5%, #FFF 45%, #FFF 55%, ${lightColor} 95%)`,\n    }} />\n};\n\nexport default BoardView;","import React, { useState } from \"react\";\n\nexport interface CodenamesFormData {\n    boardRows: number;\n    boardColumns: number;\n    cards: number;\n    startCards: number;\n    assassins: number;\n    startColor: 'Blue' | 'Red' | 'Random';\n    seed: string;\n    [key: string]: string | number;\n}\n\nexport interface BoardFormProps {\n    formData?: CodenamesFormData;\n    setFormData: (formData: CodenamesFormData) => void\n}\n\nconst linkButtonStyle = {\n    padding: 'none',\n    background: 'none',\n    border: 'none',\n    cursor: 'pointer',\n    fontFamily: 'Helvetica,Arial,sans-serif',\n    fontSize: '16px',\n    textDecoration: 'underline',\n    color: '#FFF'\n};\n\nconst defaultFormValues: CodenamesFormData = {\n    boardRows: 5,\n    boardColumns: 5,\n    cards: 8,\n    startCards: 1,\n    assassins: 1,\n    startColor: 'Random',\n    seed: ''\n};\n\nconst BoardForm: React.FC<BoardFormProps> = ({ formData, setFormData }) => {\n    const startValues = formData\n        ? formData\n        : {\n            ...defaultFormValues,\n            seed: randomSeed()\n        }\n\n    const [rows, setRows] = useState(startValues.boardRows);\n    const [columns, setColumns] = useState(startValues.boardColumns);\n    const [cards, setCards] = useState(startValues.cards);\n    const [startCards, setStartCards] = useState(startValues.startCards);\n    const [assassins, setAssassins] = useState(startValues.assassins);\n    const [startColor, setStartColor] = useState(startValues.startColor);\n    const [seed, setSeed] = useState(startValues.seed);\n\n    const [newSeedOnGenerate, setNewSeedOnGenerate] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    const setErrorTimeout: typeof setError = (action) => {\n        setTimeout(() => setError(null), 6 * 1000);\n        setError(action);\n    }\n\n    return (\n        <form onSubmit={(e) => {\n            e.preventDefault();\n            const formData: any = {};\n            for (let [k, v] of (new FormData(e.currentTarget)).entries()) {\n                formData[k] = /^\\d+$/.test(v as string) ? parseInt(v as string) : v;\n            }\n            if (newSeedOnGenerate) {\n                const newSeed = randomSeed();\n                formData.seed = newSeed;\n                setSeed(newSeed);\n            }\n            const totalCards = formData.boardRows * formData.boardColumns;\n            const configuredCards = formData.cards * 2 + formData.startCards + formData.assassins;\n            if (configuredCards >= totalCards) {\n                setErrorTimeout(`Too many configured cards (${configuredCards}) for this board (${formData.boardRows}x${formData.boardColumns}=${totalCards})`);\n                return false;\n            } else {\n                setFormData(formData);\n            }\n        }} style={{\n            margin: '32px',\n            border: '1px solid #555',\n            borderRadius: '16px',\n            padding: '16px',\n            boxShadow: '8px 8px 12px #2b2b2b',\n        }}>\n            <div style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                marginBottom: '24px'\n            }}>\n                <InputCard title=\"Board\" inputs={[\n                    <BasicInput label=\"Rows\" type=\"number\" name=\"boardRows\" value={rows} onChange={(e) => setRows(parseInt(e.target.value))} defaultValue={5} />,\n                    <BasicInput label=\"Columns\" type=\"number\" name=\"boardColumns\" value={columns} onChange={(e) => setColumns(parseInt(e.target.value))} defaultValue={5} />,\n                ]} />\n\n                <InputCard title=\"Game\" inputs={[\n                    <BasicInput label=\"Team Cards\" type=\"number\" name=\"cards\" value={cards} onChange={(e) => setCards(parseInt(e.target.value))} defaultValue={Math.floor(rows * columns / 3) || 8} />,\n                    <BasicInput label=\"Start Handicap\" type=\"number\" name=\"startCards\" value={startCards} onChange={(e) => setStartCards(parseInt(e.target.value))} defaultValue={1} />,\n                    <BasicInput label=\"Assassins\" type=\"number\" name=\"assassins\" value={assassins} onChange={(e) => setAssassins(parseInt(e.target.value))} defaultValue={Math.floor(rows * columns / 15) || 1} />,\n                    <RadioInput title=\"Starting Team\" labels={['Red', 'Blue', 'Random']} name=\"startColor\" value={startColor} onChange={(e) => setStartColor(e.target.value as any)} defaultValue=\"Random\" />\n                ]} />\n                <InputCard title=\"Random\" inputs={[<SeedInput name=\"seed\" value={seed} onChange={(e) => setSeed(e.target.value)}/>]}/>\n            </div>\n            <button style={{ background: '#268bad', marginRight: '12px' }}>Generate</button>\n            <label style={{ marginRight: '12px', color: '#888', fontSize: '14px' }}>\n                <input type=\"checkbox\" checked={newSeedOnGenerate} onChange={(e) => setNewSeedOnGenerate(e.target.checked)}/>\n                with a new random seed\n            </label>\n\n            <button\n                type=\"button\"\n                onClick={() => {\n                    setRows(defaultFormValues.boardRows);\n                    setColumns(defaultFormValues.boardColumns);\n                    setCards(defaultFormValues.cards);\n                    setStartCards(defaultFormValues.startCards);\n                    setAssassins(defaultFormValues.assassins);\n                    setStartColor(defaultFormValues.startColor);\n                    setSeed(randomSeed());\n                }}\n                style={{ background: '#c9461d', marginRight: '12px' }}>\n                Reset Defaults\n            </button>\n            {error && <span className=\"fade-out\" style={{ color: '#c9461d' }}>{error}</span>}\n        </form>\n    );\n};\n\ninterface InputCardProps {\n    title: string;\n    inputs: React.ReactComponentElement<any, { value: any, defaultValue: any }>[]\n}\n\nconst InputCard: React.FC<InputCardProps> = ({ title, inputs }) => {\n    return (\n        <div style={{ marginLeft: '24px' }}>\n            <div style={{ paddingLeft: '16px', paddingBottom: '8px' }}><b>{title}</b></div>\n            <div style={{\n                border: '1px solid #555',\n                padding: '16px',\n                borderRadius: '16px',\n                boxShadow: '6px 6px 8px #2b2b2b',\n            }}>\n                {inputs}\n            </div>\n        </div>\n    );\n};\n\nconst BasicInput: React.FC<{ label: string } & React.ComponentProps<\"input\">> = ({ label, value, defaultValue, ...inputProps }) => {\n    const [inputValue, setInputValue] = useControllableState(value, defaultValue || '');\n\n    return (\n        <label style={{ display: 'flex', flexDirection: 'column', margin: '8px' }}>\n            <span>{label} {defaultValue != undefined && (\n                <button\n                    type=\"button\"\n                    style={{ ...linkButtonStyle, color: '#888', fontSize: '14px' }}\n                    onClick={() => {\n                        setInputValue(defaultValue);\n                        // @ts-ignore\n                        inputProps.onChange && inputProps.onChange({ target: { value: defaultValue}})\n                    }}\n                >\n                    Suggested: {defaultValue}\n                </button>\n            )}</span>\n            <input \n                {...inputProps} \n                value={inputValue} \n                onChange={(e) => { \n                    setInputValue(e.target.value); \n                    inputProps.onChange && inputProps.onChange(e);\n                }}\n            />\n        </label>\n    );\n};\n\nconst RadioInput: React.FC<{ title: string, labels: string[] } & React.ComponentProps<\"input\">> = ({ title, labels, value, defaultValue, onChange, ...inputProps }) => {\n    const [checkedLabel, setCheckedLabel] = useControllableState(value, defaultValue || labels[0]);\n\n    return (\n        <div>\n            <div>\n                {title} {defaultValue != undefined && (\n                    <button\n                        type=\"button\"\n                        style={{ ...linkButtonStyle, color: '#888', fontSize: '14px' }}\n                        onClick={() => {\n                            // @ts-ignore\n                            onChange && onChange({ target: { value: defaultValue }});\n                            setCheckedLabel(defaultValue);\n                        }}\n                    >\n                        Suggested: {defaultValue}\n                    </button>\n                )}\n            </div>\n            <hr />\n            {labels.map((label) => (\n                <label style={{ marginRight: '6px' }}>{label}\n                    <input\n                        type=\"radio\"\n                        value={label}\n                        checked={label == checkedLabel}\n                        onChange={(e) => {\n                            setCheckedLabel(label);\n                            onChange && onChange(e);\n                        }}\n                        {...inputProps}\n                    />\n                </label>\n            ))}\n        </div>\n    );\n};\n\nconst randomSeed = (): string => Math.random().toString(36).slice(2);\n\nconst SeedInput: React.FC<React.ComponentProps<\"input\">> = ({ value, onChange, ...inputProps }) => {\n    const [seed, setSeed] = useControllableState(value, randomSeed());\n\n    return (\n        <div>\n            <div>\n                Seed \n                <button\n                    type=\"button\"\n                    style={{ ...linkButtonStyle, color: '#888', fontSize: '14px' }}\n                    onClick={() => {\n                        const newSeed = randomSeed();\n                        setSeed(newSeed);\n                        // @ts-ignore\n                        onChange && onChange({ target: { value: newSeed }});\n                    }}\n                >\n                    New Seed\n                </button>\n            </div>\n            <input \n                {...inputProps}\n                type=\"text\" \n                value={seed} \n                onChange={(e) => { \n                    setSeed(e.target.value);\n                    onChange && onChange(e) \n                }}\n            />\n        </div>\n    );\n};\n\nfunction useControllableState<T>(value: T, initialValue?: T | undefined): [state: T, setState: (action: React.SetStateAction<T>) => void] {\n    const [stateValue, setState] = useState(initialValue || value);\n    const effectiveValue = value !== undefined ? value : stateValue;\n    return [effectiveValue, setState];\n}\n\nexport default BoardForm;\n","\nimport chunk from 'lodash/chunk';\nimport fill from 'lodash/fill';\nimport seedrandom from 'seedrandom';\nimport { CodenamesFormData } from './BoardForm';\nimport { CardType } from './BoardView';\n\nexport type FormDataVersion = 0 | 1;\nconst UNKNOWN_VERSION = 0;\nconst WRITE_VERSION = 1;\n\nconst v1FormDataKeys: string[] = Object.keys({\n    boardRows: 0,\n    boardColumns: 0,\n    cards: 0,\n    startCards: 0,\n    startColor: 'Random',\n    assassins: 0,\n    seed: ''\n}).sort();\n\nexport const encodeFormData = (formData: CodenamesFormData): string => {\n    const orderedValues = v1FormDataKeys\n                            .map((k): [k: string, v: string | number] => [k, formData[k]])\n                            .sort(([k1], [k2]) => k1.localeCompare(k2))\n                            .map(([_, v]) => v);\n    return btoa(JSON.stringify([WRITE_VERSION, ...orderedValues]));\n}\n\nexport const decodeFormData = (slug: string): CodenamesFormData | undefined => {\n    let orderedValues: any[] = [];\n    let version: FormDataVersion = 0;\n    try {\n        [version, ...orderedValues] = JSON.parse(atob(slug));\n    } catch {\n        return undefined;\n    }\n\n    switch(version) {\n        case 1:\n            return v1DecodeFormData(orderedValues);\n        default:\n            return undefined;\n    }\n};\n\nconst v1DecodeFormData = (orderedValues: any[]): CodenamesFormData | undefined => \n    decodeWithKeys(orderedValues, v1FormDataKeys);\n\nconst decodeWithKeys = (orderedValues: any[], orderedKeys: string[]): CodenamesFormData | undefined => {\n    if (orderedValues && orderedValues.length == orderedKeys.length) {\n        const ret: any = {};\n        orderedKeys.forEach((key, i) => ret[key] = orderedValues[i]);\n        if (isValidFormData(ret)) {\n            return ret;\n        }\n    }\n\n    return undefined;\n}\n\nconst isValidFormData = (layout: any): boolean => (\n    layout && \n    layout.boardRows && \n    layout.boardColumns && \n    layout.cards && \n    !isNaN(layout.startCards) && \n    !isNaN(layout.assassins) && \n    layout.seed\n);\n\nexport const getStartColor = (\n    startColor: 'Random' | 'Blue' | 'Red', \n    seed: string\n): 'Blue' | 'Red' => {\n    if (startColor == 'Random') {\n        return seededRandomInt(seed + 'start')(0, 1) ? 'Blue' : 'Red';\n    } else {\n        return startColor;\n    }\n}\n\nexport const createLayout = ({\n    boardRows,\n    boardColumns,\n    cards,\n    startCards,\n    startColor,\n    assassins,\n    seed\n}: CodenamesFormData): CardType[][] => {\n    const rand = seededRandomInt(seed);\n\n    const actualStartColor = getStartColor(startColor, seed);\n    const blueCards = cards + (actualStartColor == 'Blue' ? startCards : 0);\n    const redCards = cards + (actualStartColor == 'Red' ? startCards : 0);\n\n    const flatLayout: CardType[] = fill(Array(boardRows * boardColumns), 'Bystander');\n    fill(flatLayout, 'Blue', 0, blueCards)\n    fill(flatLayout, 'Red', blueCards, blueCards + redCards);\n    fill(flatLayout, 'Assassin', blueCards + redCards, blueCards + redCards + assassins);\n\n    shuffle(flatLayout, rand);\n\n    return chunk(flatLayout, boardRows);\n};\n\nfunction shuffle<T>(arr: T[], rand: (min: number, max: number) => number): void {\n    for (var i = arr.length - 1; i > 0; i--) {\n        const j = rand(0, i);\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n}\n\nexport const seededRandomInt = (seed: string): (min: number, max: number) => number => {\n    const rand = seedrandom(seed);\n    return (min: number, max: number): number => Math.floor(rand() * (max - min + 1) + min);\n};\n","import React, { useState } from 'react';\nimport BoardView, { CardType } from './BoardView';\nimport BoardForm, { CodenamesFormData } from './BoardForm';\nimport { useParams } from 'react-router';\nimport { useNavigate } from 'react-router-dom';\nimport { createLayout, decodeFormData, encodeFormData, getStartColor } from './BoardEncoding';\n\nconst BoardGenerator = () => {\n    const params = useParams();\n    const slug: string | undefined = params.slug;\n    let initialFormData = undefined;\n    if (slug) {\n        initialFormData = decodeFormData(slug);\n    }\n    const [formData, setFormData] = useState<CodenamesFormData | undefined>(initialFormData);\n    const navigate = useNavigate();\n\n    const setFormDataAndHash = (newFormData: CodenamesFormData) => {\n        setFormData(newFormData);\n        navigate(`/${encodeFormData(newFormData)}`)\n    }\n    \n    return (\n        <div style={{ width: '100%', height: '100%' }}>\n            <h1 style={{ margin: '32px' }}>Codenames Board Generator</h1>\n            <BoardForm formData={formData} setFormData={(formData) => setFormDataAndHash(formData)}/>\n            {formData && <BoardView layout={createLayout(formData)} startColor={getStartColor(formData.startColor, formData.seed)}/>}\n        </div>\n    );\n}\n\nexport default BoardGenerator;\n","import React from 'react';\nimport { HashRouter, Route, Routes } from 'react-router-dom';\nimport BoardGenerator from './BoardGenerator';\n\nconst App = () => (\n  <HashRouter>\n    <Routes>\n      <Route path=\"\" element={<BoardGenerator/>}/>\n      <Route path=\":slug\" element={<BoardGenerator/>}/>\n    </Routes>\n  </HashRouter>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}