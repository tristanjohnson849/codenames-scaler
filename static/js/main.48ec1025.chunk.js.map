{"version":3,"sources":["BoardView.tsx","BoardForm.tsx","BoardGenerator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["typeToColor","Blue","Red","Bystander","Assassin","HLight","isTop","color","lightColor","style","position","top","undefined","bottom","left","height","width","margin","transform","borderRadius","background","VLight","isLeft","right","BoardView","layout","startColor","display","padding","border","boxShadow","flex","flexDirection","map","row","cellType","linkButtonStyle","cursor","fontFamily","fontSize","textDecoration","InputCard","title","inputs","marginLeft","paddingLeft","paddingBottom","BasicInput","label","inputProps","inputRef","useRef","defaultValue","type","onClick","current","value","ref","i","RadioInput","labels","onChange","useControllableState","checkedLabel","setCheckedLabel","target","marginRight","checked","e","randomSeed","Math","random","toString","slice","SeedInput","seed","setSeed","newSeed","initialValue","useState","stateValue","BoardForm","initialFormData","onSubmit","startValues","boardRows","boardColumns","cards","startCards","assassins","rows","setRows","columns","setColumns","setCards","setStartCards","setAssassins","setStartColor","error","setError","formRef","f","preventDefault","formData","FormData","currentTarget","entries","k","v","asInt","parseInt","isNaN","action","totalCards","configuredCards","setTimeout","flexWrap","marginBottom","name","floor","reset","className","formDataKeys","Object","keys","sort","isValidFormData","getStartColor","seededRandom","createLayout","blueCards","redCards","flatLayout","fill","Array","arr","length","j","shuffle","chunk","min","max","rand","SeedRandom","BoardGenerator","slug","useParams","orderedValues","JSON","parse","atob","ret","forEach","key","decodeFormData","setFormData","navigate","useNavigate","setFormDataAndHash","newFormData","k1","k2","localeCompare","btoa","stringify","encodeFormData","App","path","element","replace","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNASMA,EAA2C,CAC7CC,KAAM,UACNC,IAAK,UACLC,UAAW,UACXC,SAAU,WAGRC,EAA+D,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACrEC,EAAaD,EAAQP,EAAYO,GAAS,UAChD,OAAO,qBAAKE,MAAO,CACfC,SAAU,WACVC,IAAKL,EAAQ,OAAIM,EACjBC,OAAQP,OAAQM,EAAY,EAC5BE,KAAM,MACNC,OAAQ,OACRC,MAAO,MACPC,OAAQ,OACRC,UAAU,6BAAD,OAA+BZ,EAAQ,IAAM,GAA7C,SACTa,aAAcb,EAAQ,kBAAoB,kBAC1Cc,WAAW,6BAAD,OAA+BZ,EAA/B,oCAAqEA,EAArE,aAIZa,EAAgE,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQf,EAAY,EAAZA,MACvEC,EAAaD,EAAQP,EAAYO,GAAS,UAChD,OAAO,qBAAKE,MAAO,CACfC,SAAU,WACVI,KAAMQ,EAAS,OAAIV,EACnBW,MAAOD,OAASV,EAAY,EAC5BD,IAAK,MACLI,OAAQ,MACRC,MAAO,OACPC,OAAQ,OACRC,UAAU,6BAAD,OAA+BI,EAAS,GAAK,IAA7C,SACTH,aAAcG,EAAS,kBAAoB,kBAC3CF,WAAW,8BAAD,OAAgCZ,EAAhC,oCAAsEA,EAAtE,aAoDHgB,EAhDyB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,WAAX,OACpC,sBAAKjB,MAAO,CACRC,SAAU,WACViB,QAAS,OACTX,MAAO,OACPD,OAAQ,OACRE,OAAQ,OACRW,QAAS,OACTR,WAAY,UACZD,aAAc,OACdU,OAAQ,iBACRC,UAAW,wBAVf,UAYI,cAAC,EAAD,CAAQxB,OAAO,EAAMC,MAAOmB,IAC5B,cAAC,EAAD,CAAQpB,OAAO,EAAOC,MAAOmB,IAC7B,cAAC,EAAD,CAAQJ,QAAQ,EAAMf,MAAOmB,IAC7B,cAAC,EAAD,CAAQJ,QAAQ,EAAOf,MAAOmB,IAC9B,qBAAKjB,MAAO,CACRsB,KAAM,EACNJ,QAAS,OACTK,cAAe,SACfb,aAAc,OACdC,WAAY,UACZS,OAAQ,iBACRD,QAAS,OAPb,SASKH,EAAOQ,KAAI,SAACC,GAAD,OACR,qBAAKzB,MAAO,CACRkB,QAAS,OACTK,cAAe,MACfD,KAAM,GAHV,SAKKG,EAAID,KAAI,SAACE,GAAD,OACL,qBAAK1B,MAAO,CACRsB,KAAM,EACNX,WAAYpB,EAAYmC,GACxBlB,OAAQ,MACRE,aAAc,OACdW,UAAW,sBACXD,OAAQ,kC,+GCtE9BO,EAAkB,CACpBhB,WAAY,OACZS,OAAQ,OACRQ,OAAQ,UACRC,WAAY,6BACZC,SAAU,OACVC,eAAgB,YAChBjC,MAAO,QAiGLkC,EAAsC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAClD,OACI,sBAAKlC,MAAO,CAAEmC,WAAY,QAA1B,UACI,qBAAKnC,MAAO,CAAEoC,YAAa,OAAQC,cAAe,OAAlD,SAA2D,4BAAIJ,MAC/D,qBAAKjC,MAAO,CACRoB,OAAQ,iBACRD,QAAS,OACTT,aAAc,OACdW,UAAW,uBAJf,SAMKa,QAMXI,EAA0E,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAUC,EAAiB,iBACpGC,EAAWC,iBAAgC,MACjD,OACI,wBAAO1C,MAAO,CAAEkB,QAAS,OAAQK,cAAe,SAAUf,OAAQ,OAAlE,UACI,iCAAO+B,EAAP,SAA0CpC,GAA3BqC,EAAWG,cACtB,yBACIC,KAAK,SACL5C,MAAK,2BAAO2B,GAAP,IAAwB7B,MAAO,SACpC+C,QAAS,WACDJ,EAASK,UACTL,EAASK,QAAQC,MAAQ,GAAKP,EAAWG,eALrD,yBASiBH,EAAWG,aAT5B,UAYJ,iDAAWH,GAAX,IAAuBQ,IAAK,SAACC,GAAD,OAAOR,EAASK,QAAUG,UAK5DC,EAA4F,SAAC,GAAqE,IAAnEjB,EAAkE,EAAlEA,MAAOkB,EAA2D,EAA3DA,OAAQJ,EAAmD,EAAnDA,MAAOJ,EAA4C,EAA5CA,aAAcS,EAA8B,EAA9BA,SAAaZ,EAAiB,iBACnK,EAAwCa,EAAqBN,EAAOJ,GAAgBQ,EAAO,IAA3F,mBAAOG,EAAP,KAAqBC,EAArB,KAEA,OACI,gCACI,gCACKtB,EADL,SAC6B9B,GAAhBwC,GACL,yBACIC,KAAK,SACL5C,MAAK,2BAAO2B,GAAP,IAAwB7B,MAAO,SACpC+C,QAAS,WAELO,GAAYA,EAAS,CAAEI,OAAQ,CAAET,MAAOJ,KACxCY,EAAgBZ,IANxB,yBASiBA,EATjB,UAaR,uBACCQ,EAAO3B,KAAI,SAACe,GAAD,OACR,wBAAOvC,MAAO,CAAEyD,YAAa,OAA7B,UAAuClB,EACnC,mCACIK,KAAK,QACLG,MAAOR,EACPmB,QAASnB,GAASe,EAClBF,SAAU,SAACO,GACPJ,EAAgBhB,GAChBa,GAAYA,EAASO,KAErBnB,cAQtBoB,EAAa,kBAAcC,KAAKC,SAASC,SAAS,IAAIC,MAAM,IAE5DC,EAAqD,SAAC,GAAwC,IAAtClB,EAAqC,EAArCA,MAAOK,EAA8B,EAA9BA,SAAaZ,EAAiB,iBAC/F,EAAwBa,EAAqBN,EAAOa,KAApD,mBAAOM,EAAP,KAAaC,EAAb,KAEA,OACI,gCACI,uCAEI,wBACIvB,KAAK,SACL5C,MAAK,2BAAO2B,GAAP,IAAwB7B,MAAO,SACpC+C,QAAS,WACL,IAAMuB,EAAUR,IAChBO,EAAQC,GAERhB,GAAYA,EAAS,CAAEI,OAAQ,CAAET,MAAOqB,MAPhD,2BAaJ,iDACQ5B,GADR,IAEII,KAAK,OACLG,MAAOmB,EACPd,SAAU,SAACO,GACPQ,EAAQR,EAAEH,OAAOT,OACjBK,GAAYA,EAASO,WAOzC,SAASN,EAAwBN,EAAUsB,GACvC,MAA+BC,mBAASD,GAAxC,mBAAOE,EAAP,KAEA,MAAO,MAD0BpE,IAAV4C,EAAsBA,EAAQwB,EADrD,MAKWC,MApN6B,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,gBAAiBC,EAAe,EAAfA,SACtDC,EAAcF,GAEd,CACEG,UAAW,EACXC,aAAc,EACdC,MAAO,EACPC,WAAY,EACZC,UAAW,EACX/D,WAAY,SACZiD,KAAMN,KAGd,EAAwBU,mBAASK,EAAYC,WAA7C,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA8BZ,mBAASK,EAAYE,cAAnD,mBAAOM,EAAP,KAAgBC,EAAhB,KACA,EAA0Bd,mBAASK,EAAYG,OAA/C,mBAAOA,EAAP,KAAcO,EAAd,KACA,EAAoCf,mBAASK,EAAYI,YAAzD,mBAAOA,EAAP,KAAmBO,EAAnB,KACA,EAAkChB,mBAASK,EAAYK,WAAvD,mBAAOA,EAAP,KAAkBO,EAAlB,KACA,EAAoCjB,mBAASK,EAAY1D,YAAzD,mBAAOA,EAAP,KAAmBuE,EAAnB,KACA,EAAwBlB,mBAASK,EAAYT,MAA7C,mBAAOA,EAAP,KAAaC,EAAb,KAEA,EAA0BG,mBAAwB,MAAlD,mBAAOmB,EAAP,KAAcC,EAAd,KACMC,EAAUjD,iBAA+B,MAO/C,OACI,uBAAMM,IAAK,SAAC4C,GAAD,OAAOD,EAAQ7C,QAAU8C,GAAGlB,SAAU,SAACf,GAC9CA,EAAEkC,iBACF,IAFoD,EAE9CC,EAAgB,GAF8B,cAGhC,IAAIC,SAASpC,EAAEqC,eAAgBC,WAHC,IAGpD,2BAA8D,CAAC,IAAD,yBAApDC,EAAoD,KAAjDC,EAAiD,KACpDC,EAAQC,SAASF,GACvBL,EAASI,GAAKI,MAAMF,GAASD,EAAIC,GALe,8BAOpD,IAbkCG,EAa5BC,EAAaV,EAASlB,UAAYkB,EAASjB,aAC3C4B,EAAmC,EAAjBX,EAAShB,MAAYgB,EAASf,WAAae,EAASd,UAC5E,GAAIyB,GAAmBD,EAEnB,OAjB8BD,EAgBd,8BAAD,OAA+BE,EAA/B,6BAAmEX,EAASlB,UAA5E,YAAyFkB,EAASjB,aAAlG,YAAkH2B,EAAlH,KAfvBE,YAAW,kBAAMhB,EAAS,QAAO,KACjCA,EAASa,IAeM,EAEP7B,EAASoB,IAEd9F,MAAO,CACNQ,OAAQ,OACRY,OAAQ,iBACRV,aAAc,OACdS,QAAS,OACTE,UAAW,wBApBf,UAsBI,sBAAKrB,MAAO,CACRkB,QAAS,OACTyF,SAAU,OACVC,aAAc,QAHlB,UAKI,cAAC,EAAD,CAAW3E,MAAM,QAAQC,OAAQ,CAC7B,cAAC,EAAD,CAAYK,MAAM,OAAOK,KAAK,SAASiE,KAAK,YAAY9D,MAAOkC,EAAM7B,SAAU,SAACO,GAAD,OAAOuB,EAAQmB,SAAS1C,EAAEH,OAAOT,SAASJ,aAAc,IACvI,cAAC,EAAD,CAAYJ,MAAM,UAAUK,KAAK,SAASiE,KAAK,eAAe9D,MAAOoC,EAAS/B,SAAU,SAACO,GAAD,OAAOyB,EAAWiB,SAAS1C,EAAEH,OAAOT,SAASJ,aAAc,OAGvJ,cAAC,EAAD,CAAWV,MAAM,OAAOC,OAAQ,CAC5B,cAAC,EAAD,CAAYK,MAAM,aAAaK,KAAK,SAASiE,KAAK,QAAQ9D,MAAO+B,EAAO1B,SAAU,SAACO,GAAD,OAAO0B,EAASgB,SAAS1C,EAAEH,OAAOT,SAASJ,aAAckB,KAAKiD,MAAM7B,EAAOE,EAAU,IAAM,IAC7K,cAAC,EAAD,CAAY5C,MAAM,iBAAiBK,KAAK,SAASiE,KAAK,aAAa9D,MAAOgC,EAAY3B,SAAU,SAACO,GAAD,OAAO2B,EAAce,SAAS1C,EAAEH,OAAOT,SAASJ,aAAc,IAC9J,cAAC,EAAD,CAAYJ,MAAM,YAAYK,KAAK,SAASiE,KAAK,YAAY9D,MAAOiC,EAAW5B,SAAU,SAACO,GAAD,OAAO4B,EAAac,SAAS1C,EAAEH,OAAOT,SAASJ,aAAckB,KAAKiD,MAAM7B,EAAOE,EAAU,KAAO,IACzL,cAAC,EAAD,CAAYlD,MAAM,gBAAgBkB,OAAQ,CAAC,MAAO,OAAQ,UAAW0D,KAAK,aAAa9D,MAAO9B,EAAYmC,SAAU,SAACO,GAAD,OAAO6B,EAAc7B,EAAEH,OAAOT,QAAQJ,aAAa,cAE3K,cAAC,EAAD,CAAWV,MAAM,SAASC,OAAQ,CAAC,cAAC,EAAD,CAAW2E,KAAK,OAAO9D,MAAOmB,EAAMd,SAAU,SAACO,GAAD,OAAOQ,EAAQR,EAAEH,OAAOT,gBAE7G,wBAAQ/C,MAAK,2BAAO2B,GAAP,IAAwB8B,YAAa,QAAlD,sBAEA,wBACIb,KAAK,SACLC,QAAS,WACD8C,EAAQ7C,UACRoC,EAAQ,GACRE,EAAW,GACXO,EAAQ7C,QAAQiE,UAGxB/G,MAAK,2BAAO2B,GAAP,IAAwB8B,YAAa,QAT9C,4BAYCgC,GAAS,sBAAMuB,UAAU,WAAWhH,MAAO,CAAEF,MAAO,WAA3C,SAAyD2F,Q,kDCtGzEwB,EAAyBC,OAAOC,KAAK,CACvCvC,UAAW,EACXC,aAAc,EACdC,MAAO,EACPC,WAAY,EACZ9D,WAAY,SACZ+D,UAAW,EACXd,KAAM,KACPkD,OAiDGC,EAAkB,SAACrG,GAAD,OACpBA,GACAA,EAAO4D,WACP5D,EAAO6D,cACP7D,EAAO8D,QACNwB,MAAMtF,EAAO+D,cACbuB,MAAMtF,EAAOgE,YACdhE,EAAOkD,MAGLoD,EAAgB,SAACxB,GACnB,MAA2B,UAAvBA,EAAS7E,WACFsG,EAAazB,EAAS5B,KAAO,QAAS,EAAG,GAAK,OAAS,MAEvD4B,EAAS7E,YAIlBuG,EAAe,SAAC,GAQkB,IAPpC5C,EAOmC,EAPnCA,UACAC,EAMmC,EANnCA,aACAC,EAKmC,EALnCA,MACAC,EAImC,EAJnCA,WACA9D,EAGmC,EAHnCA,WACA+D,EAEmC,EAFnCA,UACAd,EACmC,EADnCA,KAEMuD,EAAY3C,GAAuB,QAAd7D,EAAuB8D,EAAa,GACzD2C,EAAW5C,GAAuB,OAAd7D,EAAsB8D,EAAa,GAEvD4C,EAA8BC,IAAKC,MAAMjD,EAAYC,GAAe,aAO1E,OANA+C,IAAKD,EAAY,OAAQ,EAAGF,GAC5BG,IAAKD,EAAY,MAAOF,EAAWA,EAAYC,GAC/CE,IAAKD,EAAY,WAAYF,EAAYC,EAAUD,EAAYC,EAAW1C,GAO9E,SAAoB8C,EAAU5D,GAC1B,IAAK,IAAIjB,EAAI6E,EAAIC,OAAS,EAAG9E,EAAI,EAAGA,IAAK,CACrC,IAAM+E,EAAIT,EAAatE,EAAIiB,EAAM,EAAGjB,GADC,EAElB,CAAC6E,EAAIE,GAAIF,EAAI7E,IAA/B6E,EAAI7E,GAFgC,KAE5B6E,EAAIE,GAFwB,MANzCC,CAAQN,EAAYzD,GAEbgE,IAAMP,EAAY/C,IAU7B,IAAM2C,EAAe,SAACrD,EAAciE,EAAaC,GAC7C,IAAMC,EAAOC,IAAWpE,GACxB,OAAOL,KAAKiD,MAAMuB,KAAUD,EAAMD,EAAM,GAAKA,IAGlCI,EA5EQ,WACnB,IACMC,EADSC,cACyBD,KACpC/D,OAAkBtE,EAClBqI,IACA/D,EAvBe,SAAC+D,GACpB,IAAIE,EAAuB,GAC3B,IACIA,EAAgBC,KAAKC,MAAMC,KAAKL,IAClC,SACE,OAEJ,GAAIE,GAAiBA,EAAcX,QAAUd,EAAac,OAAQ,CAC9D,IAAMe,EAAW,GAEjB,GADA7B,EAAa8B,SAAQ,SAACC,EAAK/F,GAAN,OAAY6F,EAAIE,GAAON,EAAczF,MACtDoE,EAAgByB,GAChB,OAAOA,GAYOG,CAAeT,IAErC,MAAgClE,mBAAwCG,GAAxE,mBAAOqB,EAAP,KAAiBoD,EAAjB,KACMC,EAAWC,cAEXC,EAAqB,SAACC,GACxBJ,EAAYI,GACZH,EAAS,qBAAD,OAnCO,SAACrD,GACpB,IAAM4C,EAAgBxB,OAAOjB,QAAQH,GAAUsB,MAAK,kBAAEmC,EAAF,oBAAQC,EAAR,2BAAgBD,EAAGE,cAAcD,MAAKhI,KAAI,uDAC9F,OAAOkI,KAAKf,KAAKgB,UAAUjB,IAiCOkB,CAAeN,MAGjD,OACI,sBAAKtJ,MAAO,CAAEO,MAAO,OAAQD,OAAQ,QAArC,UACI,oBAAIN,MAAO,CAAEQ,OAAQ,QAArB,uCACA,cAAC,EAAD,CAAWiE,gBAAiBA,EAAiBC,SAAU,SAACoB,GAAD,OAAcuD,EAAmBvD,MACvFA,GAAY,cAAC,EAAD,CAAW9E,OAAQwG,EAAa1B,GAAW7E,WAAYqG,EAAcxB,SC/C/E+D,EAVH,kBACV,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,IAAD,CAAUC,SAAO,EAACC,GAAG,wBAC9C,cAAC,IAAD,CAAOH,KAAK,oBAAoBC,QAAS,cAAC,EAAD,MACzC,cAAC,IAAD,CAAOD,KAAK,0BAA0BC,QAAS,cAAC,EAAD,YCKtCG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.48ec1025.chunk.js","sourcesContent":["import React from \"react\";\n\nexport type CardType = 'Blue' | 'Red' | 'Bystander' | 'Assassin';\n\nexport interface BoardProps {\n    layout: CardType[][];\n    startColor?: 'Red' | 'Blue';\n};\n\nconst typeToColor: { [K in CardType]: string } = {\n    Blue: '#0062cc',\n    Red: '#e3242b',\n    Bystander: '#bfaa8c',\n    Assassin: '#1b1b1b',\n}\n\nconst HLight: React.FC<{ isTop: boolean, color?: 'Blue' | 'Red' }> = ({ isTop, color }) => {\n    const lightColor = color ? typeToColor[color] : '#FFE800';\n    return <div style={{\n        position: 'absolute',\n        top: isTop ? 0 : undefined,\n        bottom: isTop ? undefined : 0,\n        left: '40%',\n        height: '32px',\n        width: '20%',\n        margin: 'auto',\n        transform: `perspective(10px) rotateX(${isTop ? '-' : ''}1deg)`,\n        borderRadius: isTop ? '4px 4px 8px 8px' : '8px 8px 4px 4px',\n        background: `linear-gradient(to right, ${lightColor} 5%, #FFF 45%, #FFF 55%, ${lightColor} 95%)`,\n    }} />;\n};\n\nconst VLight: React.FC<{ isLeft: boolean, color?: 'Blue' | 'Red' }> = ({ isLeft, color }) => {\n    const lightColor = color ? typeToColor[color] : '#FFE800';\n    return <div style={{\n        position: 'absolute',\n        left: isLeft ? 0 : undefined,\n        right: isLeft ? undefined : 0,\n        top: '40%',\n        height: '20%',\n        width: '32px',\n        margin: 'auto',\n        transform: `perspective(10px) rotateY(${isLeft ? '' : '-'}1deg)`,\n        borderRadius: isLeft ? '4px 8px 8px 4px' : '8px 4px 4px 8px',\n        background: `linear-gradient(to bottom, ${lightColor} 5%, #FFF 45%, #FFF 55%, ${lightColor} 95%)`,\n    }} />\n};\n\nconst BoardView: React.FC<BoardProps> = ({ layout, startColor }) => (\n    <div style={{\n        position: 'relative',\n        display: 'flex',\n        width: '80vh',\n        height: '80vh',\n        margin: 'auto',\n        padding: '32px',\n        background: '#434343',\n        borderRadius: '12px',\n        border: '1px solid #777',\n        boxShadow: '8px 8px 12px #2b2b2b',\n    }}>\n        <HLight isTop={true} color={startColor} />\n        <HLight isTop={false} color={startColor} />\n        <VLight isLeft={true} color={startColor} />\n        <VLight isLeft={false} color={startColor} />\n        <div style={{\n            flex: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            borderRadius: '12px',\n            background: '#2b2b2b',\n            border: '1px solid #777',\n            padding: '8px',\n        }}>\n            {layout.map((row) =>\n                <div style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    flex: 1\n                }}>\n                    {row.map((cellType) =>\n                        <div style={{\n                            flex: 1,\n                            background: typeToColor[cellType],\n                            margin: '4px',\n                            borderRadius: '12px',\n                            boxShadow: '6px 6px 8px #1c1c1c',\n                            border: '1px solid #555'\n                        }} />\n                    )}\n                </div>\n            )}\n        </div>\n    </div>\n);\n\nexport default BoardView;","import React, { useRef, useState } from \"react\";\n\nexport interface CodenamesFormData {\n    boardRows: number;\n    boardColumns: number;\n    cards: number;\n    startCards: number;\n    assassins: number;\n    startColor: 'Blue' | 'Red' | 'Random';\n    seed: string;\n}\n\nexport interface BoardFormProps {\n    initialFormData?: CodenamesFormData;\n    onSubmit: (formData: CodenamesFormData) => void\n}\n\nconst linkButtonStyle = {\n    background: 'none',\n    border: 'none',\n    cursor: 'pointer',\n    fontFamily: 'Helvetica,Arial,sans-serif',\n    fontSize: '16px',\n    textDecoration: 'underline',\n    color: '#FFF'\n};\n\nconst BoardForm: React.FC<BoardFormProps> = ({ initialFormData, onSubmit }) => {\n    const startValues = initialFormData\n        ? initialFormData\n        : {\n            boardRows: 5,\n            boardColumns: 5,\n            cards: 8,\n            startCards: 1,\n            assassins: 1,\n            startColor: 'Random',\n            seed: randomSeed()\n        }\n\n    const [rows, setRows] = useState(startValues.boardRows);\n    const [columns, setColumns] = useState(startValues.boardColumns);\n    const [cards, setCards] = useState(startValues.cards);\n    const [startCards, setStartCards] = useState(startValues.startCards);\n    const [assassins, setAssassins] = useState(startValues.assassins);\n    const [startColor, setStartColor] = useState(startValues.startColor);\n    const [seed, setSeed] = useState(startValues.seed);\n\n    const [error, setError] = useState<string | null>(null);\n    const formRef = useRef<HTMLFormElement | null>(null);\n\n    const setErrorTimeout: typeof setError = (action) => {\n        setTimeout(() => setError(null), 6 * 1000);\n        setError(action);\n    }\n\n    return (\n        <form ref={(f) => formRef.current = f} onSubmit={(e) => {\n            e.preventDefault();\n            const formData: any = {};\n            for (let [k, v] of (new FormData(e.currentTarget)).entries()) {\n                const asInt = parseInt(v as string);\n                formData[k] = isNaN(asInt) ? v : asInt;\n            }\n            const totalCards = formData.boardRows * formData.boardColumns;\n            const configuredCards = formData.cards * 2 + formData.startCards + formData.assassins;\n            if (configuredCards >= totalCards) {\n                setErrorTimeout(`Too many configured cards (${configuredCards}) for this board (${formData.boardRows}x${formData.boardColumns}=${totalCards})`);\n                return false;\n            } else {\n                onSubmit(formData);\n            }\n        }} style={{\n            margin: '32px',\n            border: '1px solid #555',\n            borderRadius: '16px',\n            padding: '16px',\n            boxShadow: '8px 8px 12px #2b2b2b',\n        }}>\n            <div style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                marginBottom: '12px'\n            }}>\n                <InputCard title=\"Board\" inputs={[\n                    <BasicInput label=\"Rows\" type=\"number\" name=\"boardRows\" value={rows} onChange={(e) => setRows(parseInt(e.target.value))} defaultValue={5} />,\n                    <BasicInput label=\"Columns\" type=\"number\" name=\"boardColumns\" value={columns} onChange={(e) => setColumns(parseInt(e.target.value))} defaultValue={5} />,\n                ]} />\n\n                <InputCard title=\"Game\" inputs={[\n                    <BasicInput label=\"Team Cards\" type=\"number\" name=\"cards\" value={cards} onChange={(e) => setCards(parseInt(e.target.value))} defaultValue={Math.floor(rows * columns / 3) || 8} />,\n                    <BasicInput label=\"Start Handicap\" type=\"number\" name=\"startCards\" value={startCards} onChange={(e) => setStartCards(parseInt(e.target.value))} defaultValue={1} />,\n                    <BasicInput label=\"Assassins\" type=\"number\" name=\"assassins\" value={assassins} onChange={(e) => setAssassins(parseInt(e.target.value))} defaultValue={Math.floor(rows * columns / 15) || 1} />,\n                    <RadioInput title=\"Starting Team\" labels={['Red', 'Blue', 'Random']} name=\"startColor\" value={startColor} onChange={(e) => setStartColor(e.target.value)} defaultValue=\"Random\" />\n                ]} />\n                <InputCard title=\"Random\" inputs={[<SeedInput name=\"seed\" value={seed} onChange={(e) => setSeed(e.target.value)}/>]}/>\n            </div>\n            <button style={{ ...linkButtonStyle, marginRight: '8px' }}>Generate</button>\n\n            <button\n                type=\"button\"\n                onClick={() => {\n                    if (formRef.current) {\n                        setRows(5);\n                        setColumns(5);\n                        formRef.current.reset()\n                    }\n                }}\n                style={{ ...linkButtonStyle, marginRight: '8px' }}>\n                Reset Defaults\n            </button>\n            {error && <span className=\"fade-out\" style={{ color: '#e3242b' }}>{error}</span>}\n        </form>\n    );\n};\n\ninterface InputCardProps {\n    title: string;\n    inputs: React.ReactComponentElement<any, { value: any, defaultValue: any }>[]\n}\n\nconst InputCard: React.FC<InputCardProps> = ({ title, inputs }) => {\n    return (\n        <div style={{ marginLeft: '24px' }}>\n            <div style={{ paddingLeft: '16px', paddingBottom: '8px' }}><b>{title}</b></div>\n            <div style={{\n                border: '1px solid #555',\n                padding: '16px',\n                borderRadius: '16px',\n                boxShadow: '6px 6px 8px #2b2b2b',\n            }}>\n                {inputs}\n            </div>\n        </div>\n    );\n};\n\nconst BasicInput: React.FC<{ label: string } & React.ComponentProps<\"input\">> = ({ label, ...inputProps }) => {\n    const inputRef = useRef<HTMLInputElement | null>(null);\n    return (\n        <label style={{ display: 'flex', flexDirection: 'column', margin: '8px' }}>\n            <span>{label} {inputProps.defaultValue != undefined && (\n                <button\n                    type=\"button\"\n                    style={{ ...linkButtonStyle, color: '#aaa' }}\n                    onClick={() => {\n                        if (inputRef.current) {\n                            inputRef.current.value = '' + inputProps.defaultValue;\n                        }\n                    }}\n                >\n                    (Suggested: {inputProps.defaultValue})\n                </button>\n            )}</span>\n            <input {...inputProps} ref={(i) => inputRef.current = i} />\n        </label>\n    );\n};\n\nconst RadioInput: React.FC<{ title: string, labels: string[] } & React.ComponentProps<\"input\">> = ({ title, labels, value, defaultValue, onChange, ...inputProps }) => {\n    const [checkedLabel, setCheckedLabel] = useControllableState(value, defaultValue || labels[0]);\n\n    return (\n        <div>\n            <div>\n                {title} {defaultValue != undefined && (\n                    <button\n                        type=\"button\"\n                        style={{ ...linkButtonStyle, color: '#aaa' }}\n                        onClick={() => {\n                            // @ts-ignore\n                            onChange && onChange({ target: { value: defaultValue }});\n                            setCheckedLabel(defaultValue);\n                        }}\n                    >\n                        (Suggested: {defaultValue})\n                    </button>\n                )}\n            </div>\n            <hr />\n            {labels.map((label) => (\n                <label style={{ marginRight: '6px' }}>{label}\n                    <input\n                        type=\"radio\"\n                        value={label}\n                        checked={label == checkedLabel}\n                        onChange={(e) => {\n                            setCheckedLabel(label);\n                            onChange && onChange(e);\n                        }}\n                        {...inputProps}\n                    />\n                </label>\n            ))}\n        </div>\n    );\n};\n\nconst randomSeed = (): string => Math.random().toString(36).slice(2);\n\nconst SeedInput: React.FC<React.ComponentProps<\"input\">> = ({ value, onChange, ...inputProps }) => {\n    const [seed, setSeed] = useControllableState(value, randomSeed());\n\n    return (\n        <div>\n            <div>\n                Seed \n                <button\n                    type=\"button\"\n                    style={{ ...linkButtonStyle, color: '#aaa' }}\n                    onClick={() => {\n                        const newSeed = randomSeed();\n                        setSeed(newSeed);\n                        // @ts-ignore\n                        onChange && onChange({ target: { value: newSeed }});\n                    }}\n                >\n                    (New Seed)\n                </button>\n            </div>\n            <input \n                {...inputProps}\n                type=\"text\" \n                value={seed} \n                onChange={(e) => { \n                    setSeed(e.target.value);\n                    onChange && onChange(e) \n                }}\n            />\n        </div>\n    );\n};\n\nfunction useControllableState<T>(value: T, initialValue: T): [state: T, setState: (action: React.SetStateAction<T>) => void] {\n    const [stateValue, setState] = useState(initialValue);\n    const effectiveValue = value !== undefined ? value : stateValue;\n    return [effectiveValue, setState];\n}\n\nexport default BoardForm;\n","import React, { useState } from 'react';\nimport BoardView, { CardType } from './BoardView';\nimport BoardForm, { CodenamesFormData } from './BoardForm';\nimport chunk from 'lodash/chunk';\nimport fill from 'lodash/fill';\nimport { useParams } from 'react-router';\nimport { useNavigate } from 'react-router-dom';\nimport SeedRandom from 'seed-random';\n\nconst formDataKeys: string[] = Object.keys({\n    boardRows: 0,\n    boardColumns: 0,\n    cards: 0,\n    startCards: 0,\n    startColor: 'Random',\n    assassins: 0,\n    seed: ''\n}).sort();\n\nconst encodeFormData = (formData: CodenamesFormData): string => {\n    const orderedValues = Object.entries(formData).sort(([k1], [k2]) => k1.localeCompare(k2)).map(([_, v]) => v);\n    return btoa(JSON.stringify(orderedValues));\n}\n\nconst decodeFormData = (slug: string): CodenamesFormData | undefined => {\n    let orderedValues: any[] = [];\n    try {\n        orderedValues = JSON.parse(atob(slug));\n    } catch {\n        return undefined;\n    }\n    if (orderedValues && orderedValues.length == formDataKeys.length) {\n        const ret: any = {};\n        formDataKeys.forEach((key, i) => ret[key] = orderedValues[i]);\n        if (isValidFormData(ret)) {\n            return ret;\n        }\n    }\n\n    return undefined;\n}\n\nconst BoardGenerator = () => {\n    const params = useParams();\n    const slug: string | undefined = params.slug;\n    let initialFormData = undefined;\n    if (slug) {\n        initialFormData = decodeFormData(slug);\n    }\n    const [formData, setFormData] = useState<CodenamesFormData | undefined>(initialFormData);\n    const navigate = useNavigate();\n\n    const setFormDataAndHash = (newFormData: CodenamesFormData) => {\n        setFormData(newFormData);\n        navigate(`/codenames-scaler/${encodeFormData(newFormData)}`)\n    }\n    \n    return (\n        <div style={{ width: '100%', height: '100%' }}>\n            <h1 style={{ margin: '32px' }}>Codenames Board Generator</h1>\n            <BoardForm initialFormData={initialFormData} onSubmit={(formData) => setFormDataAndHash(formData)}/>\n            {formData && <BoardView layout={createLayout(formData)} startColor={getStartColor(formData)}/>}\n        </div>\n    );\n}\n\nconst isValidFormData = (layout: any): boolean => (\n    layout && \n    layout.boardRows && \n    layout.boardColumns && \n    layout.cards && \n    !isNaN(layout.startCards) && \n    !isNaN(layout.assassins) && \n    layout.seed\n);\n\nconst getStartColor = (formData: CodenamesFormData): 'Blue' | 'Red' => {\n    if (formData.startColor == 'Random') {\n        return seededRandom(formData.seed + 'start', 0, 1) ? 'Blue' : 'Red';\n    } else {\n        return formData.startColor;\n    }\n}\n\nconst createLayout = ({\n    boardRows,\n    boardColumns,\n    cards,\n    startCards,\n    startColor,\n    assassins,\n    seed\n}: CodenamesFormData): CardType[][] => {\n    const blueCards = cards + (startColor == 'Blue' ? startCards : 0);\n    const redCards = cards + (startColor == 'Red' ? startCards : 0);\n\n    const flatLayout: Array<CardType> = fill(Array(boardRows * boardColumns), 'Bystander');\n    fill(flatLayout, 'Blue', 0, blueCards)\n    fill(flatLayout, 'Red', blueCards, blueCards + redCards);\n    fill(flatLayout, 'Assassin', blueCards + redCards, blueCards + redCards + assassins);\n\n    shuffle(flatLayout, seed);\n\n    return chunk(flatLayout, boardRows);\n};\n\nfunction shuffle<T>(arr: T[], seed: string): void {\n    for (var i = arr.length - 1; i > 0; i--) {\n        const j = seededRandom(i + seed, 0, i);\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n}\n\nconst seededRandom = (seed: string, min: number, max: number): number => {\n    const rand = SeedRandom(seed);\n    return Math.floor(rand() * (max - min + 1) + min);\n};\n\nexport default BoardGenerator;\n","import React from 'react';\nimport { HashRouter, Navigate, Route, Routes } from 'react-router-dom';\nimport BoardGenerator from './BoardGenerator';\n\nconst App = () => (\n  <HashRouter>\n    <Routes>\n      <Route path=\"/\" element={<Navigate replace to=\"/codenames-scaler\" />}/>\n      <Route path=\"/codenames-scaler\" element={<BoardGenerator/>}/>\n      <Route path=\"/codenames-scaler/:slug\" element={<BoardGenerator/>}/>\n    </Routes>\n  </HashRouter>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}